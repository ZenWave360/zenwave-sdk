package {{basePackage}}.core.implementation;

import {{basePackage}}.core.domain.*;
import {{basePackage}}.core.inbound.*;
import {{basePackage}}.core.inbound.dtos.*;
import {{basePackage}}.core.implementation.mappers.*;
import {{basePackage}}.core.outbound.jpa.*;
{{#if jdl.options.options.search}}
import {{basePackage}}.core.outbound.search.*;
{{/if}}

import java.util.Optional;
import org.mapstruct.factory.Mappers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service Implementation for managing {{service.entityNames}}.
 */
@Service
@Transactional(readOnly = true)
public class {{service.name}}Impl implements {{service.name}} {

    private final Logger log = LoggerFactory.getLogger(getClass());

{{#each entities as |entity|}}
    {{~#if (inputDTOSuffix entity)}}
    private final {{entity.className}}Mapper {{entity.instanceName}}Mapper = Mappers.getMapper({{entity.className}}Mapper.class);
    {{~/if}}
    {{~#unless (skipEntityRepository this)}}
    private final {{entity.className}}Repository {{entity.instanceName}}Repository;
    {{~/unless}}
    {{~#if options.search}}
    private final {{entity.className}}SearchRepository {{entity.instanceName}}SearchRepository;
    {{~/if}}
{{/each}}

    /**
     * Constructor.
     */
    public {{service.name}}Impl({{#joinWithTemplate service.entities delimiter=", "}}{{#unless (skipEntityRepository this)}}{{className}}Repository {{instanceName}}Repository{{/unless}}{{#if options.search}}, {{className}}SearchRepository {{instanceName}}SearchRepository{{/if}}{{/joinWithTemplate}}) {
        {{~#joinWithTemplate service.entities ~}}
            {{#unless (skipEntityRepository this)}}this.{{instanceName}}Repository = {{instanceName}}Repository;{{/unless}}
            {{#if options.search}}this.{{instanceName}}SearchRepository = {{instanceName}}SearchRepository;{{/if}}
        {{~/joinWithTemplate~}}
    }

{{#each entities as |entity|}}
    // {{entity.name}}

    @Override
    @Transactional(readOnly = false)
    public {{entity.className}} create{{entity.className}}({{entity.className}}{{inputDTOSuffix}} input) {
        log.debug("Request to save {{entity.className}}: {}", input);
        var {{entity.instanceName}} = {{#if (inputDTOSuffix entity)}}{{entity.instanceName}}Mapper.update(new {{entity.className}}(), input);
        {{entity.instanceName}} ={{/if}} {{entity.instanceName}}Repository.save({{entity.instanceName}});
        // TODO: you may need to reload the entity here to fetch all the relationships
        return {{entity.instanceName}};
    }

    @Override
    @Transactional(readOnly = false)
    public Optional<{{entity.className}}> update{{entity.className}}({{idJavaType}} id, {{entity.className}}{{inputDTOSuffix}} input) {
        log.debug("Request to update {{entity.className}}: {}", input);
        var {{entity.instanceName}} = {{entity.instanceName}}Repository.findById(id);
        {{~#if (inputDTOSuffix entity)}}
        {{entity.instanceName}} = {{entity.instanceName}}.map(existing{{entity.instanceName}} -> {{entity.instanceName}}Mapper.update(existing{{entity.instanceName}}, input));
        {{~/if}}
        // saving is unnecessary (jpa save anti-pattern): https://vladmihalcea.com/best-spring-data-jparepository/
        // return {{entity.instanceName}}.map({{entity.instanceName}}Repository::save);
        return {{entity.instanceName}};
    }

    @Override
    public Page<{{entity.className}}> list{{entity.classNamePlural}}(Pageable pageable) {
        log.debug("Request list of {{entity.classNamePlural}}: {}", pageable);
        return {{entity.instanceName}}Repository.findAll(pageable);
    }

    {{~#if entity.options.searchCriteria}}
    @Override
    public Page<{{entity.className}}> search{{entity.classNamePlural}}({{criteriaClassName entity}} criteria, Pageable pageable) {
        log.debug("Request to search {{entity.classNamePlural}}: {} - {}", criteria, pageable);
        // TODO implement this search by criteria
        return {{entity.instanceName}}Repository.findAll(pageable);
    }
    {{~/if}}

    @Override
    public Optional<{{entity.className}}> get{{entity.className}}({{idJavaType}} id) {
        log.debug("Request to get {{entity.className}} : {}", id);
        return {{entity.instanceName}}Repository.findById(id);
    }

    @Override
    @Transactional(readOnly = false)
    public void delete{{entity.className}}({{idJavaType}} id) {
        log.debug("Request to delete {{entity.className}} : {}", id);
        {{entity.instanceName}}Repository.deleteById(id);
    }
{{/each}}
}
