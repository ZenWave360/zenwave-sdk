package {{basePackage}}.core.domain;

import java.io.Serializable;
import java.math.*;
import java.time.*;
import java.util.*;
import javax.persistence.*;
import javax.validation.constraints.*;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
* {{entity.comment}}
*/
{{#unless entity.options.embedded}}
@Entity
@Table(name = "{{snakeCase entity.tableName}}")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
{{~/unless}}
{{~#if (or entity.options.embedded entity.options.embeddable)}}
@Embeddable
{{~/if}}
public class {{entity.className}} implements Serializable {

    private static final long serialVersionUID = 1L;

{{#unless (skipEntityId entity)~}}
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
    @Column(name = "id")
    private {{idJavaType}} id;
{{/unless~}}

{{#each entity.fields as |field|}}
  {{{fieldValidationAnnotations field}}}
  {{~#if field.isEntity}}
    @Embedded
    {{~ assign 'embeddedFields' (jsonPath jdl 'entities.' field.type '.fields[*]') ~}}
    {{#unless (skipEntityId (jsonPath jdl 'entities.' field.type))~}}
    @AttributeOverride( name = "id", column = @Column(name = "{{snakeCase field.name}}_id"))
    {{/unless~}}
    {{~#joinWithTemplate embeddedFields as |it|}}
    @AttributeOverride( name = "{{it.name}}", column = @Column(name = "{{snakeCase field.name}}_{{name}}"))
    {{~/joinWithTemplate~}}
  {{~else~}}
    @Column(name = "{{snakeCase field.name}}" {{#if field.validations.required}}, nullable = false{{/if}}{{#if field.validations.unique}}, unique = true{{/if}}{{#if field.validations.maxlength}}, length = {{field.validations.maxlength.value}}{{/if}})
  {{~/if~}}
    {{~#if field.isEnum}} @Enumerated(EnumType.STRING){{/if}}
    private {{field.type}} {{field.name}};
{{/each}}

{{#each entity.relationships as |relationship|}}
{{#if relationship.fieldName~}}
    {{#if (jsonPath jdl 'entities.' relationship.otherEntityName '.options.aggregate')}}
    @Column(name = "{{snakeCase relationship.fieldName}}_id")
    private {{idJavaType}} {{relationship.fieldName}}Id;
    {{~/if}}
    {{> (partial 'partials/' relationship.type)}}
    private {{{relationshipFieldType relationship}}} {{relationship.fieldName}};
{{/if~}}
{{/each}}

{{#unless (skipEntityId entity)~}}
    public {{idJavaType}} getId() {
        return id;
    }
    public {{entity.className}} withId({{idJavaType}} id) {
        this.id = id;
        return this;
    }
    public void setId({{idJavaType}} id) {
        this.id = id;
    }
{{/unless~}}

{{#each entity.fields as |field|}}
    public {{entity.name}} with{{capitalize field.name}}({{field.type}} {{field.name}}) {
    this.{{field.name}} = {{field.name}};
    return this;
    }
{{/each}}

{{#each entity.fields as |field|}}
    public {{field.type}} get{{capitalize field.name}}() {
        return {{field.name}};
    }

    public void set{{capitalize field.name}}({{field.type}} {{field.name}}) {
        this.{{field.name}} = {{field.name}};
    }
{{/each}}

{{#each entity.relationships as |relationship|}}
{{#if relationship.fieldName~}}
    {{~#if (jsonPath jdl 'entities.' relationship.otherEntityName '.options.aggregate')}}
    public {{idJavaType}} get{{capitalize relationship.fieldName}}Id() {
        return {{relationship.fieldName}}Id;
    }
    public void set{{capitalize relationship.fieldName}}Id({{idJavaType}} {{relationship.fieldName}}Id) {
        this.{{relationship.fieldName}}Id = {{relationship.fieldName}}Id;
    }
    {{~/if}}
    public {{{relationshipFieldType relationship}}} get{{capitalize relationship.fieldName}}() {
        return {{relationship.fieldName}};
    }
    public void set{{capitalize relationship.fieldName}}({{{relationshipFieldType relationship}}} {{relationship.fieldName}}) {
        this.{{relationship.fieldName}} = {{relationship.fieldName}};
    }
{{/if~}}
{{/each}}

}
