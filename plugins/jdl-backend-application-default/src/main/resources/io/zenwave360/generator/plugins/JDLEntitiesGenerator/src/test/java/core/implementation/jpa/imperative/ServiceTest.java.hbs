package {{basePackage}}.core.implementation;

import {{basePackage}}.core.domain.*;
import {{basePackage}}.core.inbound.*;
import {{basePackage}}.core.inbound.dtos.*;
import {{basePackage}}.core.implementation.mappers.*;
import {{basePackage}}.core.outbound.jpa.*;
import {{basePackage}}.infrastructure.jpa.inmemory.*;
{{#if jdl.options.options.search}}
import {{basePackage}}.core.outbound.search.*;
{{/if}}

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.PageRequest;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.mockito.Mockito.*;

/**
 * Acceptance Test for {{service.name}}.
 */
public class {{service.name}}Test  {

    private final Logger log = LoggerFactory.getLogger(getClass());

{{#each entities as |entity|}}
    @Spy
    {{entity.className}}Mapper {{entity.instanceName}}Mapper = Mappers.getMapper({{entity.className}}Mapper.class);
    @Spy
    {{entity.className}}RepositoryInMemory {{entity.instanceName}}Repository = new {{entity.className}}RepositoryInMemory();
    {{~#if options.search}}
    @Mock
    {{entity.className}}SearchRepository {{entity.instanceName}}SearchRepository;
    {{~/if}}
{{/each}}

    @InjectMocks
    {{~#assign "serviceInstance"}}{{asInstanceName service.name}}{{/assign}}
    {{service.name}}Impl {{serviceInstance}};

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        {{~#each entities as |entity|}}
        {{entity.instanceName}}Repository.save(new {{entity.className}}());
        {{~/each}}
    }

{{#each entities as |entity|}}
    // {{entity.name}}

    @Test
    void testCRUD{{entity.className}}() {
        var input = new {{entity.className}}Input();
        // TODO fill input data
        var {{entity.instanceName}} = {{serviceInstance}}.create{{entity.className}}(input);
        assertNotNull({{entity.instanceName}}.getId());
        assertTrue({{entity.instanceName}}Repository.containsEntity({{entity.instanceName}}));

        var id = {{entity.instanceName}}.getId();
        var {{entity.instanceName}}Update = new {{entity.className}}Input();
        // TODO fill update data
        assertTrue({{entity.instanceName}}Repository.containsKey(id));
        var {{entity.instanceName}}Updated = {{serviceInstance}}.update{{entity.className}}(id, {{entity.instanceName}}Update);
        assertTrue({{entity.instanceName}}Updated.isPresent());
        assertTrue({{entity.instanceName}}Repository.containsEntity({{entity.instanceName}}Updated.get()));

        assertTrue({{entity.instanceName}}Repository.containsKey(id));
        {{serviceInstance}}.delete{{entity.className}}(id);
        assertFalse({{entity.instanceName}}Repository.containsKey(id));
    }

    @Test
    void testCreate{{entity.className}}() {
        var input = new {{entity.className}}{{inputDTOSuffix}}();
        // TODO fill input data
        var {{entity.instanceName}} = {{serviceInstance}}.create{{entity.className}}(input);
        assertNotNull({{entity.instanceName}}.getId());
        assertTrue({{entity.instanceName}}Repository.containsEntity({{entity.instanceName}}));
    }

    @Test
    void testUpdate{{entity.className}}() {
        var id = 0L; // TODO fill id
        var input = new {{entity.className}}{{inputDTOSuffix}}();
        // TODO fill input data
        assertTrue({{entity.instanceName}}Repository.containsKey(id));
        var {{entity.instanceName}} = {{serviceInstance}}.update{{entity.className}}(id, input);
        assertTrue({{entity.instanceName}}.isPresent());
        assertTrue({{entity.instanceName}}Repository.containsEntity({{entity.instanceName}}.get()));
    }

    @Test
    void testList{{entity.classNamePlural}}() {
        var results = {{serviceInstance}}.list{{entity.classNamePlural}}(PageRequest.of(0, 10));
        assertNotNull(results);
    }

    {{#if entity.options.searchCriteria ~}}
    @Test
    void testSearch{{entity.classNamePlural}}() {
        var criteria = new {{criteriaClassName entity}}();
        // TODO fill criteria
        var results = {{serviceInstance}}.search{{entity.classNamePlural}}(criteria, PageRequest.of(0, 10));
        assertNotNull(results);
    }
    {{~/if}}

    @Test
    void testGet{{entity.className}}() {
        var id = 0L; // TODO fill id
        var {{entity.instanceName}} = {{serviceInstance}}.get{{entity.className}}(id);
        assertTrue({{entity.instanceName}}.isPresent());
    }

    @Test
    void testDelete{{entity.className}}() {
        var id = 0L; // TODO fill id
        assertTrue({{entity.instanceName}}Repository.containsKey(id));
        {{serviceInstance}}.delete{{entity.className}}(id);
        assertFalse({{entity.instanceName}}Repository.containsKey(id));
    }

{{/each}}
}
