package {{basePackage}}.core.inbound.dtos;

import {{basePackage}}.core.domain.*;
import java.io.Serializable;
import java.math.*;
import java.time.*;
import java.util.*;
import javax.validation.constraints.*;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

/**
 *
 */
{{#assign "_criteriaClassName"}}{{criteriaClassName entity}}{{/assign}}
public class {{_criteriaClassName}} extends PageRequest implements Serializable, Pageable {

    public {{_criteriaClassName}}() {
        this(0, 10, Sort.unsorted());
    }

    public {{_criteriaClassName}}(int page, int size, Sort sort) {
        super(page, size, sort);
    }

{{#with entity.options.searchCriteriaObject as |entity| }}

{{#each entity.fields as |field|}}
    {{#each field.validations as |validation|}}
    // @{{validation.name}}("{{validation.value}}")
    {{/each}}
    {{#assign "typeSuffix"}}{{#if field.isEntity}}{{inputDTOSuffix}}{{/if}}{{/assign}}
    private {{{fieldType field suffix=typeSuffix}}} {{field.name}};
{{/each}}

{{#each entity.fields as |field|}}
    {{#assign "typeSuffix"}}{{#if field.isEntity}}{{inputDTOSuffix}}{{/if}}{{/assign}}
    {{~#if field.isArray}}
        public {{_criteriaClassName}} add{{capitalize field.name}}({{field.type}}{{typeSuffix}} {{field.name}}) {
        this.{{field.name}}.add({{field.name}});
        return this;
        }
    {{~/if}}
    public {{_criteriaClassName}} with{{capitalize field.name}}({{{fieldType field suffix=typeSuffix}}} {{field.name}}) {
        this.{{field.name}} = {{field.name}};
        return this;
    }
{{/each}}

{{#each entity.fields as |field|}}
    {{#assign "typeSuffix"}}{{#if field.isEntity}}{{inputDTOSuffix}}{{/if}}{{/assign}}
    public {{{fieldType field suffix=typeSuffix}}} get{{capitalize field.name}}() {
        return {{field.name}};
    }

    public void set{{capitalize field.name}}({{{fieldType field suffix=typeSuffix}}} {{field.name}}) {
        this.{{field.name}} = {{field.name}};
    }
{{/each}}

{{/with}}
}