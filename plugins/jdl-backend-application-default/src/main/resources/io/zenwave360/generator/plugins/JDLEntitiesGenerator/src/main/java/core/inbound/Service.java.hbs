package {{basePackage}}.core.inbound;

import {{basePackage}}.core.domain.*;
import {{basePackage}}.core.inbound.dtos.*;
import java.util.Optional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

/**
 * Inbound Service Port for managing {{service.entityNames}}.
 */
public interface {{service.name}} {

{{#each entities as |entity|}}
    // {{entity.name}}

    /**
     * Creates a {{entity.instanceName}}.
     *
     * @param {{entity.instanceName}} the entity to save.
     * @return the persisted entity.
     */
    {{entity.className}} create{{entity.className}}({{entity.className}}{{inputDTOSuffix}} {{entity.instanceName}});

    /**
     * Updates a {{entity.instanceName}}.
     *
     * @param {{entity.instanceName}} the entity to update.
     * @return the persisted entity.
     */
    Optional<{{entity.className}}> update{{entity.className}}(String id, {{entity.className}}{{inputDTOSuffix}} {{entity.instanceName}});

    /**
     * Get all the {{entity.classNamePlural}}.
     *
     * @param criteria the criteria with pagination information.
     * @return the list of entities.
     */
    Page<{{entity.className}}> list{{entity.classNamePlural}}(Pageable pageable);

    {{~#if entity.options.searchCriteria}}
    /**
     * Get all the {{entity.classNamePlural}} matching the search criteria.
     *
     * @param criteria the criteria with pagination information.
     * @return the list of entities.
     */
    Page<{{entity.className}}> search{{entity.classNamePlural}}({{criteriaClassName entity}} criteria, Pageable pageable);
    {{~/if}}

    /**
     * Get the "id" {{entity.instanceName}}.
     *
     * @param id the id of the entity.
     * @return the entity.
     */
    Optional<{{entity.className}}> get{{entity.className}}(String id);

    /**
     * Delete the "id" {{entity.instanceName}}.
     *
     * @param id the id of the entity.
     */
    void delete{{entity.className}}(String id);
{{/each}}
}
