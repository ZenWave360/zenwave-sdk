{{~assign "_entity" aggregateCommandsForMethod.entity}}
{{~assign "returnEntity" (methodReturnEntity method)}}
    {{{logMethodCall method}}}
{{!-- @Async --}}
{{~#if method.options.async}}
    {{#if method.returnType}}return CompletableFuture.completedFuture({{/if}} {{method.name}}Sync({{methodParametersCallSignature method}}){{#if method.returnType}}){{/if}};
{{!-- @delete --}}
{{~else if (and _entity method.options.delete method.paramId)}}
    log.debug("Request to delete {{_entity.className}} : {}", id);
    {{_entity.instanceName}}Repository.deleteById(id);
{{!-- list search --}}
{{~else if (and _entity method.returnType method.returnTypeIsArray)}}
    {{~#if (eq _entity.name returnEntity)}}
    return {{_entity.instanceName}}Repository.findAll({{#if method.options.paginated}}pageable{{/if}});
    {{~else}}
    var {{_entity.instanceNamePlural}} = {{_entity.instanceName}}Repository.findAll({{#if method.options.paginated}}pageable{{/if}});
    return {{wrapWithMapper _entity}};
    {{~/if}}
{{!-- Optional<Entity> patch(id, Map) --}}
{{~else if (and _entity method.options.patch method.paramId method.parameter method.returnType method.returnTypeIsOptional)}}
    var {{_entity.instanceName}} = {{_entity.instanceName}}Repository.{{{findById method}}}.map(existing{{_entity.className}} -> {
    return {{asInstanceName service.name}}Mapper.update(existing{{_entity.className}}, {{{mapperInputCallSignature method.parameter}}});
    })
    .map({{_entity.instanceName}}Repository::save)
    {{~#unless (eq _entity.name method.returnType)}}
        .map({{asInstanceName service.name}}Mapper::as{{returnType}})
    {{~/unless}}
    ;
    {{~> (partial '../withEvents')}}
    return {{_entity.instanceName}};
{{!-- Optional<Entity> update(id, Entity) --}}
{{~else if (and _entity method.paramId method.parameter method.returnType method.returnTypeIsOptional)}}
    var {{_entity.instanceName}} = {{_entity.instanceName}}Repository.{{{findById method}}}.map(existing{{_entity.className}} -> {
        return {{asInstanceName service.name}}Mapper.update(existing{{_entity.className}}, {{{mapperInputCallSignature method.parameter}}});
    })
    .map({{_entity.instanceName}}Repository::save)
    {{~#unless (eq _entity.name method.returnType)}}
    .map({{asInstanceName service.name}}Mapper::as{{returnType}})
    {{~/unless}}
    ;
    {{~> (partial '../withEvents')}}
    return {{_entity.instanceName}};
{{!-- Entity update(id, Entity) --}}
{{~else if (and _entity method.paramId method.parameter method.returnType)}}
    var {{_entity.instanceName}} = {{_entity.instanceName}}Repository.{{{findById method}}}.map(existing{{_entity.className}} -> {
        return {{asInstanceName service.name}}Mapper.update(existing{{_entity.className}}, {{{mapperInputCallSignature method.parameter}}});
    })
    .map({{_entity.instanceName}}Repository::save)
    .orElseThrow();
    {{~> (partial '../withEvents')}}
    return {{wrapWithMapper _entity}};
{{!-- Optional<Entity> get(id) --}}
{{~else if (and _entity method.paramId method.returnType method.returnTypeIsOptional)}}
    {{~assign 'needMapping' (not (eq _entity.name method.returnType))}}
    return {{_entity.instanceName}}Repository.{{{findById method}}}{{#if needMapping}}.map({{asInstanceName service.name}}Mapper::as{{method.returnType}}){{/if}};
{{!-- Entity get(id) --}}
{{~else if (and _entity method.paramId method.returnType)}}
    {{~assign 'needMapping' (not (eq _entity.name method.returnType))}}
    return {{_entity.instanceName}}Repository.{{{findById method}}}{{#if needMapping}}.map({{asInstanceName service.name}}Mapper::as{{method.returnType}}){{/if}}.orElseThrow();
{{!-- Optional<Entity> get(MyEntity) --}}
{{~else if (and _entity method.parameter method.returnType method.returnTypeIsOptional)}}
    var {{_entity.instanceName}} = {{asInstanceName service.name}}Mapper.update(new {{_entity.className}}(), {{{mapperInputCallSignature method.parameter}}});
    // TODO: implement this method
    {{~> (partial '../withEvents')}}
    return Optional.ofNullable({{wrapWithMapper _entity}});
{{!-- Optional<Entity> get(MyEntity) --}}
{{~else if (and _entity method.parameter method.returnType)}}
    var {{_entity.instanceName}} = {{asInstanceName service.name}}Mapper.update(new {{_entity.className}}(), {{{mapperInputCallSignature method.parameter}}});
    // TODO: implement this method
    {{~> (partial '../withEvents')}}
    return {{wrapWithMapper _entity}};
{{!-- Optional<Entity> get() --}}
{{~else if (and _entity method.returnType)}}
    var {{_entity.instanceName}} = new {{_entity.className}}();
    // TODO: implement this method
    {{~> (partial '../withEvents')}}
    return {{wrapWithMapper _entity}};
{{!-- void get() --}}
{{~else if (and _entity)}}
    var {{_entity.instanceName}} = new {{_entity.className}}();
    // TODO: implement this method
    {{~> (partial '../withEvents')}}

{{!-- we know nothing (???) --}}
{{~else~}}
    // TODO: implement this method
    {{~> (partial '../withEvents')}}
  {{~#if method.returnType}}
    return null;
  {{~/if}}
{{~/if}}
