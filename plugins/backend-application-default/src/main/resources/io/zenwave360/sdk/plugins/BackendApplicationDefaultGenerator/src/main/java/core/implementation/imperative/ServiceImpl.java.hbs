package {{coreImplementationPackage}};

import {{entitiesPackage}}.*;
import {{inboundPackage}}.*;
import {{inboundDtosPackage}}.*;
import {{coreImplementationPackage}}.mappers.*;
import {{outboundRepositoryPackage}}.*;
{{#if includeEmitEventsImplementation}}
    {{~#if (needsEventsProducer service)}}
import {{outboundEventsPackage}}.*;
    {{~/if}}
    {{#if (includeDomainEvents service)}}
import {{domainEventsPackage}}.*;
    {{/if}}
{{/if}}

import java.math.*;
import java.time.*;
import java.util.*;
import org.mapstruct.factory.Mappers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
{{~#if (jsonPath service 'methods[*][?(@.options.async)]')}}
import java.util.concurrent.CompletableFuture;
import org.springframework.scheduling.annotation.Async;
{{~/if}}
{{~#if (includeEmitEventsImplementation service)}}
import org.springframework.context.ApplicationEventPublisher;
{{~/if}}
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service Implementation for managing {{service.entityNames}}.
 */
@Service
@Transactional(readOnly = true)
{{~#if useLombok}}
@lombok.AllArgsConstructor
{{~/if}}
public class {{service.name}}Impl implements {{service.name}} {

    private final Logger log = LoggerFactory.getLogger(getClass());

    private final {{service.name}}Mapper {{asInstanceName service.name}}Mapper = {{service.name}}Mapper.INSTANCE;

{{#each entities as |entity|}}
    {{~#unless (skipEntityRepository this)}}
    private final {{entity.className}}Repository {{entity.instanceName}}Repository;
    {{~/unless}}
{{/each}}

{{#if (includeEmitEventsImplementation service)}}
    private final EventsMapper eventsMapper = EventsMapper.INSTANCE;
    {{~#if (needsEventsProducer service)}}
    private final {{eventsProducerInterface service.name}} eventsProducer;
    {{~/if}}
	private final ApplicationEventPublisher applicationEventPublisher;
{{/if}}

{{#unless useLombok~}}
    /**
     * Constructor.
     */
    public {{service.name}}Impl({{#joinWithTemplate service.entities delimiter=", "}}{{#unless (skipEntityRepository this)}}{{className}}Repository {{instanceName}}Repository{{/unless}}{{/joinWithTemplate}}
                                {{~#if (includeEmitEventsImplementation service)}}
                                    {{~#if (needsEventsProducer service)}}, {{eventsProducerInterface service.name}} eventsProducer{{/if~}}
                                    , ApplicationEventPublisher applicationEventPublisher
                                {{~/if~}}
                                ) {
        {{~#joinWithTemplate service.entities ~}}
            {{#unless (skipEntityRepository this)}}this.{{instanceName}}Repository = {{instanceName}}Repository;{{/unless}}
        {{~/joinWithTemplate~}}
        {{~#if (includeEmitEventsImplementation service)}}
        this.eventsProducer = eventsProducer;
        this.applicationEventPublisher = applicationEventPublisher;
        {{~/if}}
    }
{{/unless~}}

{{#each service.methods as |method|}}
    {{~> (partial '../partials/' persistence '/methodAnnotations')~}}
    {{~> (partial '../partials/serviceMethodSignature')}} {
        {{~> (partial '../partials/' persistence '/methodBody')~}}
    }
{{/each}}

{{#each (serviceAggregates service) as |aggregate|}}
	private {{aggregate.name}} persistAndEmitEvents({{aggregate.name}} {{asInstanceName aggregate.name}}) {
		var {{asInstanceName aggregate.aggregateRoot}} = {{asInstanceName aggregate.aggregateRoot}}Repository.save({{asInstanceName aggregate.name}}.getRootEntity());
		{{asInstanceName aggregate.name}}.getEvents().forEach(event -> {
		{{#each (aggregateEvents aggregate) as |event|}}
            if (event instanceof {{event.className}}) {
            {{~#if event.options.asyncapi }}
		        {{~#if includeEmitEventsImplementation }}
                eventsProducer.{{operationNameForEvent event.name}}(eventsMapper.as{{event.name}}(({{event.className}}) event));
                {{~else}}
                // TODO: set 'includeEmitEventsImplementation' to generate this
                // eventsProducer.{{operationNameForEvent event.name}}(eventsMapper.as{{event.name}}(({{event.className}}) event));
                {{~/if}}
            {{~else}}
                applicationEventPublisher.publishEvent(event);
            {{~/if}}
            }
		{{/each}}
		});
		return {{asInstanceName aggregate.name}};
	}
{{/each}}
}
