package {{coreImplementationPackage}};

import {{basePackage}}.config.*;
import {{entitiesPackage}}.*;
import {{inboundPackage}}.*;
import {{inboundDtosPackage}}.*;
import {{basePackage}}.core.implementation.mappers.*;
import {{basePackage}}.core.outbound.jpa.*;
import {{infrastructurePackage}}.jpa.inmemory.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.mapstruct.factory.Mappers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.PageRequest;

import java.util.Optional;
import java.time.*;
import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.mockito.Mockito.*;

/**
 * Acceptance Test for {{service.name}}.
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class {{service.name}}Test  {

    private final Logger log = LoggerFactory.getLogger(getClass());

    ServicesInMemoryConfig context = new ServicesInMemoryConfig();
    {{~#assign "serviceInstance"}}{{asInstanceName service.name}}{{/assign}}
    {{service.name}}Impl {{serviceInstance}} = context.{{serviceInstance}}();
{{#each entities as |entity|}}
    {{entity.className}}RepositoryInMemory {{entity.instanceName}}Repository = context.{{entity.instanceName}}Repository();
{{/each}}
    @BeforeEach
    void setUp() {
        {{~#each entities as |entity|}}
        {{entity.instanceName}}Repository.clear();
        {{entity.instanceName}}Repository.save(new {{entity.className}}());
        {{~/each}}
    }

{{#each entities as |entity|}}
    @Test
    @Order(0)
    void testCRUD{{entity.className}}() {
        /*
        var input = new {{entity.className}}{{inputDTOSuffix}}();
        // TODO fill input data
        {{~#each entity.fields as |field|}}
        // input.set{{capitalize field.name}}({{{populateField field}}});
        {{~/each}}
        var {{entity.instanceName}} = {{serviceInstance}}.create{{entity.className}}(input);
        assertNotNull({{entity.instanceName}}.getId());
        assertTrue({{entity.instanceName}}Repository.containsEntity({{entity.instanceName}}));

        var id = {{entity.instanceName}}.getId();
        var {{entity.instanceName}}Update = new {{entity.className}}{{inputDTOSuffix}}();
        // TODO fill update data
        {{~#each entity.fields as |field|}}
        // {{entity.instanceName}}Update.set{{capitalize field.name}}({{{populateField field}}});
        {{~/each}}
        assertTrue({{entity.instanceName}}Repository.containsKey(id));
        var {{entity.instanceName}}Updated = {{serviceInstance}}.update{{entity.className}}(id, {{entity.instanceName}}Update);
        assertTrue({{entity.instanceName}}Updated.isPresent());
        assertTrue({{entity.instanceName}}Repository.containsEntity({{entity.instanceName}}Updated.get()));

        assertTrue({{entity.instanceName}}Repository.containsKey(id));
        {{serviceInstance}}.delete{{entity.className}}(id);
        assertFalse({{entity.instanceName}}Repository.containsKey(id));
        */
    }
{{/each}}

{{#each service.methods as |method|}}
    @Test
    @Order({{@index}})
    void {{method.name}}Test() {
        {{~> (partial 'testMethodBody')~}}
    }
{{/each}}
}
