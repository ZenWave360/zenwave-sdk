{{~#if method.withEvents}}
{{~#if includeEmitEventsImplementation}}
    {{~#if method.returnTypeIsOptional}} if({{entity.instanceName}}.isPresent()) { {{~/if}}
        // emit events
        {{~#each (methodEvents method) as |event|}}
            {{~#if (methodEntity method)}}
            var {{asInstanceName event.name}} = eventsMapper.as{{event.name}}({{entity.instanceName}}{{#if method.returnTypeIsOptional~}} .get() {{~/if}});
            {{~else}}
            var {{asInstanceName event.name}} = eventsMapper.as{{event.name}}({{{methodParametersCallSignature method}}});
            {{~/if}}
            {{~#if event.options.asyncapi}}
            eventsProducer.{{operationNameForEvent event.name}}({{asInstanceName event.name}});
            {{~else}}
            applicationEventPublisher.publishEvent({{asInstanceName event.name}});
            {{~/if}}
        {{~/each}}
    {{~#if method.returnTypeIsOptional}} } {{~/if}}
{{~else}}
// TODO emit events: {{method.withEvents}}
// set 'includeEmitEventsImplementation' to generate this
// set --force to overwrite existing files
{{~/if}}
{{~/if~}}
