package {{layout.basePackage}}.config;

{{#if entities}}
import {{layout.entitiesPackage}}.*;
{{/if}}
{{#if services}}
import {{layout.inboundPackage}}.*;
import {{layout.coreImplementationPackage}}.*;
{{/if}}
{{#if includeEmitEventsImplementation}}
    {{~#if (needsEventsProducer service)}}
import {{layout.outboundEventsPackage}}.*;
    {{~/if}}
    {{#if (includeDomainEvents service)}}
import {{layout.domainEventsPackage}}.*;
    {{/if}}
{{/if}}
{{~#if (needsEventBus service)}}
import {{layout.infrastructureEventsPackage}}.*;
{{~/if}}
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import java.util.List;
import java.util.ArrayList;

/**
 * Services InMemory Config. It can be used standalone or with @SpringBootTest.
 */
@Configuration
@Profile("in-memory")
public class ServicesInMemoryConfig extends RepositoriesInMemoryConfig {

{{#if (includeEmitEventsImplementation service)}}
    {{~#if (needsEventsProducer service)}}
    protected final EventsProducerInMemoryContext eventsProducerInMemoryContext = new EventsProducerInMemoryContext();
    {{~/if}}
{{/if}}
{{~#if (needsEventBus service)}}
    private InMemoryEventPublisher eventPublisher = new InMemoryEventPublisher();
{{~/if}}

{{~#each services as |service|}}
    protected final {{service.name}}Impl {{asInstanceName service.name}} = new {{service.name}}Impl(
        {{~#joinWithTemplate service.entities delimiter=", " as |entity| ~}}
{{#unless (skipEntityRepository entity)}}{{entity.instanceName}}Repository(){{/unless}}
        {{~/joinWithTemplate~}}
        {{#if (includeEmitEventsImplementation service)}}
            {{~#if (needsEventsProducer service)}}, eventsProducerInMemoryContext.{{eventsProducerInstance service.name}}(){{/if~}}
            {{~#if (needsEventBus service)}}, eventPublisher{{/if~}}
        {{/if}}
        );
{{~/each}}

{{~#each services as |service|}}
    @Bean
    public <T extends {{service.name}}> T {{asInstanceName service.name}}() {
        return (T) {{asInstanceName service.name}};
    }
{{~/each}}

{{assign "aggregates" (findAggregates entities)}}
{{~#each aggregates as |entity|}}
	static List<{{entity.className}}> _{{entity.instanceNamePlural}};
{{~/each}}
	public void reloadTestData() {
        {{assign "phisicalEntities" (jsonPath entities "$[?(@.options.skip != true)]")}}
		var testDataLoader = new TestDataLoader(List.of({{#joinWithTemplate phisicalEntities delimiter=', ' as |entity|}}{{entity.className}}.class{{/joinWithTemplate}}));
        {{~#each aggregates as |entity|}}
		var {{entity.instanceNamePlural}} = _{{entity.instanceNamePlural}} != null? _{{entity.instanceNamePlural}} : testDataLoader.loadCollectionTestDataAsObjects({{entity.className}}.class);
		{{entity.instanceName}}Repository().deleteAll();
		{{entity.instanceName}}Repository().saveAll({{entity.instanceNamePlural}});
		{{~/each}}
        {{~#if (needsEventBus service)}}
        eventPublisher.getEvents().clear();
        {{~/if}}
	}

{{~#if (includeEmitEventsImplementation service)}}
    {{~#if (needsEventsProducer service)}}
    public EventsProducerInMemoryContext getEventsProducerInMemoryContext() {
        return eventsProducerInMemoryContext;
    }
    {{~/if}}
{{~/if}}
{{~#if (needsEventBus service)}}
        @Bean
        public InMemoryEventPublisher  eventPublisher() {
        return eventPublisher;
        }
{{~/if}}
}
