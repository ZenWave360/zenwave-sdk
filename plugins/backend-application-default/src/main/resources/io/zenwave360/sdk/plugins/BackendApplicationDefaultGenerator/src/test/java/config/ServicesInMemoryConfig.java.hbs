package {{basePackage}}.config;

{{#if entities}}
import {{entitiesPackage}}.*;
{{/if}}
{{#if services}}
import {{coreImplementationPackage}}.*;
{{/if}}
{{#if includeEmitEventsImplementation}}
import {{outboundEventsPackage}}.*;
{{/if}}
{{~#if (includeEmitEventsImplementation service)}}
import org.springframework.context.ApplicationEventPublisher;
{{~/if}}
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import java.util.List;
import java.util.ArrayList;

/**
 * Services InMemory Config. It can be used standalone or with @SpringBootTest.
 */
@Configuration
@Profile("in-memory")
public class ServicesInMemoryConfig extends RepositoriesInMemoryConfig {

{{#if (includeEmitEventsImplementation service)}}
    protected final EventsProducerInMemoryContext eventsProducerInMemoryContext = new EventsProducerInMemoryContext();
    private ApplicationEventPublisher applicationEventPublisher = new ApplicationEventPublisher() {
        @Override
        public void publishEvent(Object event) {
            publishedEvents.add(event);
        }
    };
{{/if}}

{{~#each services as |service|}}
    protected final {{service.name}}Impl {{asInstanceName service.name}} = new {{service.name}}Impl(
        {{~#joinWithTemplate service.entities delimiter=", " as |entity| ~}}
{{#unless (skipEntityRepository entity)}}{{entity.instanceName}}Repository(){{/unless}}
        {{~/joinWithTemplate~}}
        {{#if (includeEmitEventsImplementation service)}}
        , eventsProducerInMemoryContext.{{eventsProducerInstance service.name}}(), applicationEventPublisher
        {{/if}}
        );
{{~/each}}

{{~#each services as |service|}}
    @Bean
    public {{service.name}}Impl {{asInstanceName service.name}}() {
        return {{asInstanceName service.name}};
    }
{{~/each}}

{{assign "aggregates" (jsonPath entities "[*][?(@.options.aggregate)]")}}
{{~#each aggregates as |entity|}}
	static List<{{entity.className}}> _{{entity.instanceNamePlural}};
{{~/each}}
	public void reloadTestData() {
		var testDataLoader = new TestDataLoader(List.of({{#joinWithTemplate entities delimiter=', ' as |entity|}}{{entity.className}}.class{{/joinWithTemplate}}));
        {{~#each aggregates as |entity|}}
		var {{entity.instanceNamePlural}} = _{{entity.instanceNamePlural}} != null? _{{entity.instanceNamePlural}} : testDataLoader.loadCollectionTestDataAsObjects({{entity.className}}.class);
		{{entity.className}}Repository().deleteAll();
		{{entity.className}}Repository().saveAll({{entity.instanceNamePlural}});
		{{~/each}}
	}

{{~#if (includeEmitEventsImplementation service)}}
    private List<Object> publishedEvents = new ArrayList<>();

    public List<Object> getPublishedEvents() {
        return publishedEvents;
    }
{{~/if}}
}
