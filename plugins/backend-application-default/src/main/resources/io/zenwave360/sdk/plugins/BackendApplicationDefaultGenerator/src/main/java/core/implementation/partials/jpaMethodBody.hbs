{{~#each entities as |entity|}}
    {{~#if (isCrudMethod 'create' method=method entity=entity )}}
        log.debug("Request to save {{entity.className}}: {}", input);
        var {{entity.instanceName}} = {{entity.instanceName}}Mapper.update(new {{entity.className}}(), {{{mapperInputCallSignature method.parameter}}});
        {{entity.instanceName}} = {{entity.instanceName}}Repository.save({{entity.instanceName}});
        // TODO: you may need to reload the entity here to fetch all the relationships
        return {{wrapWithMapper entity}};
    {{~else if (isCrudMethod 'update' method=method entity=entity )}}
        log.debug("Request to update {{entity.className}}: {}", input);
        var {{entity.instanceName}} = {{entity.instanceName}}Repository.findById(id);
        {{entity.instanceName}} = {{entity.instanceName}}.map(existing{{entity.instanceName}} -> {{entity.instanceName}}Mapper.update(existing{{entity.instanceName}}, {{{mapperInputCallSignature method.parameter}}}));
        // saving is unnecessary: https://vladmihalcea.com/best-spring-data-jparepository/
        return {{wrapWithMapper entity}};
    {{~else if (isCrudMethod 'list' method=method entity=entity )}}
        log.debug("Request list of {{entity.classNamePlural}}: {}", pageable);
        var page = {{entity.instanceName}}Repository.findAll(pageable);
        return {{wrapWithMapper entity}};
    {{~else if (isCrudMethod 'search' method=method entity=entity )}}
        log.debug("Request to search {{entity.classNamePlural}}: {} - {}", input, pageable);
        // TODO implement this search by criteria
        var page = {{entity.instanceName}}Repository.findAll(pageable);
        return {{wrapWithMapper entity}};
    {{~else if (isCrudMethod 'get' method=method entity=entity )}}
        log.debug("Request to get {{entity.className}} : {}", id);
        var {{entity.instanceName}} = {{entity.instanceName}}Repository.findById(id);
        return {{wrapWithMapper entity}};
    {{~else if (isCrudMethod 'delete' method=method entity=entity )}}
        log.debug("Request to delete {{entity.className}} : {}", id);
        {{entity.instanceName}}Repository.deleteById(id);
    {{~else~}}
    {{~/if}}
{{~/each}}
{{~#unless method.isCrudMethod}} {{!-- comes from helper isCrudMethod --}}
  {{~assign "entity" (methodEntity method)}}
  {{~assign "returnEntity" (methodReturnEntity method)}}
  {{~#if (and entity method.paramId method.returnType method.returnTypeIsOptional)}}
        log.debug("Request {{method.name}}: {}", id);
        var {{entity.instanceName}} = {{entity.instanceName}}Repository.findById(id).map(existing{{entity.className}} -> {
            return {{entity.instanceName}}Mapper.update(existing{{entity.className}}, {{{mapperInputCallSignature method.parameter}}});
        }).map({{entity.instanceName}}Repository::save);
        return {{entity.instanceName}};
  {{~else if entity}}
      {{~#if method.paramId }}
        log.debug("Request {{method.name}}: {}", id);
        var {{entity.instanceName}} = {{entity.instanceName}}Repository.findById(id).orElseThrow();
        {{~#if method.parameter}}
        {{entity.instanceName}} = {{entity.instanceName}}Mapper.update({{entity.instanceName}}, {{{mapperInputCallSignature method.parameter}}});
        {{~/if}}
      {{~else if method.parameter }}
        log.debug("Request {{method.name}}: {}", input);
        {{~#if (eq entity.name returnEntity.name)}}
        var {{entity.instanceName}} = {{entity.instanceName}}Mapper.update(new {{entity.className}}(), {{{mapperInputCallSignature method.parameter}}});
        {{~/if}}
      {{~else}}
        log.debug("Request {{method.name}}");
        var {{entity.instanceName}}; // = new {{entity.className}}();
      {{~/if}}
      // TODO: implement this method
      {{~#if method.returnType}}
        {{~#if (eq entity.name returnEntity.name)}}
        {{entity.instanceName}} = {{entity.instanceName}}Repository.save({{entity.instanceName}});
        return {{wrapWithMapper entity}};
        {{~else}}
        return {{wrapWithMapper entity}};
        {{~/if}}
      {{~/if}}
  {{~else~}}
        // TODO: implement this method
      {{~#if method.returnType}}
        return null;
      {{~/if}}
  {{~/if}}
{{~/unless}}
