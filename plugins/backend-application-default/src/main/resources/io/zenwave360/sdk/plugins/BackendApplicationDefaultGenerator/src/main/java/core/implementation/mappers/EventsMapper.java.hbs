package {{layout.coreImplementationMappersPackage}};

import {{layout.coreImplementationMappersCommonPackage}}.BaseMapper;
import {{layout.entitiesPackage}}.*;
{{~#if (includeDomainEvents zdl)}}
import {{layout.domainEventsPackage}}.*;
{{~/if}}
import {{layout.inboundDtosPackage}}.*;

import java.util.List;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;


@Mapper(uses = { BaseMapper.class })
public interface EventsMapper {

    EventsMapper INSTANCE = Mappers.getMapper(EventsMapper.class);

{{~#each (listOfPairEventEntity zdl) as |pair|}}
    {{~assign 'eventPackage' (ifTruthy pair.isAsyncApi layout.outboundEventsModelPackage layout.domainEventsPackage) }}
    {{~#if pair.entity}}
    {{eventPackage}}.{{pair.event.name}} as{{{pair.event.name}}}({{pair.entity.className}} {{asInstanceName pair.entity.name}});
    {{~else}}
    {{eventPackage}}.{{pair.event.name}} as{{{pair.event.name}}}({{{methodParametersSignature method}}});
    {{~/if}}
{{~/each}}

{{~#each (domainEventsWithAsyncapiAnnotation zdl) as |event|}}
    {{layout.outboundEventsModelPackage}}.{{event.name}} as{{{event.name}}}({{event.className}} event);
{{~/each}}
}
