package {{basePackage}}.adapters.web;

import {{basePackage}}.core.domain.*;
import {{basePackage}}.core.inbound.*;
import {{basePackage}}.core.inbound.dtos.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;


/**
 * REST controller for managing {@link {{entity.className}} }.
 */
@RestController
@RequestMapping("/api")
public class {{entity.className}}Resource {

    private final Logger log = LoggerFactory.getLogger(getClass());

    private static final String ENTITY_NAME = "{{entity.kebabCase}}";

    {{#assign "serviceClassName"}}{{entity.options.service}}{{/assign}}
    {{#assign "serviceInstance"}}{{uncapFirst serviceClassName}}{{/assign}}
    private final {{serviceClassName}} {{serviceInstance}};

    public {{entity.className}}Resource({{serviceClassName}} {{serviceInstance}}) {
        this.{{serviceInstance}} = {{serviceInstance}};
    }

    /**
     * {@code POST  /{{entity.kebabCasePlural}} } : Create a new {{entity.instanceName}}.
     *
     * @param {{entity.instanceName}} the {{entity.instanceName}} to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new {{entity.instanceName}}, or with status {@code 400 (Bad Request)} if the {{entity.instanceName}} has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/{{entity.kebabCasePlural}}")
    public ResponseEntity<{{entity.className}}> create{{entity.className}}(@Valid @RequestBody {{entity.className}}{{inputDTOSuffix}} {{entity.instanceName}}) throws URISyntaxException {
        log.debug("REST request to create {{entity.className}}{{inputDTOSuffix}} : {}", {{entity.instanceName}});
        {{entity.className}} result = {{serviceInstance}}.create{{entity.className}}({{entity.instanceName}});
        return ResponseEntity
                .created(new URI("/api/{{entity.kebabCase}}s/" + result.getId()))
                .body(result);
    }

    /**
     * {@code PUT  /{{entity.kebabCasePlural}}/:id} } : Updates an existing {{entity.instanceName}}.
     *
     * @param id the id of the {{entity.instanceName}} to save.
     * @param {{entity.instanceName}} the {{entity.instanceName}} to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated {{entity.instanceName}},
     * or with status {@code 400 (Bad Request)} if the {{entity.instanceName}} is not valid,
     * or with status {@code 500 (Internal Server Error)} if the {{entity.instanceName}} couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/{{entity.kebabCasePlural}}/{id}")
    public ResponseEntity<{{entity.className}}> update{{entity.className}}(@PathVariable(value = "id", required = false) final {{idJavaType}} id, @Valid @RequestBody {{entity.className}}{{inputDTOSuffix}} {{entity.instanceName}})
            throws URISyntaxException {
        log.debug("REST request to update {{entity.className}} : {}, {}", id, {{entity.instanceName}});
        Optional<{{entity.className}}> result = {{serviceInstance}}.update{{entity.className}}(id, {{entity.instanceName}});
        return wrapOrNotFound(result);
    }

    /**
     * {@code GET  /{{entity.kebabCasePlural}} } : get all the {{entity.instanceName}}s.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of {{entity.instanceName}}s in body.
     */
    @GetMapping("/{{entity.kebabCasePlural}}")
    public Page<{{entity.className}}> list{{entity.classNamePlural}}(Pageable pageable) {
        log.debug("REST request to get all {{entity.classNamePlural}}s");
        return {{serviceInstance}}.list{{entity.classNamePlural}}(pageable);
    }

    /**
     * {@code GET  /{{entity.kebabCasePlural}}/:id} } : get the "id" {{entity.instanceName}}.
     *
     * @param id the id of the {{entity.instanceName}} to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the {{entity.instanceName}}, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/{{entity.kebabCasePlural}}/{id}")
    public ResponseEntity<{{entity.className}}> get{{entity.className}}(@PathVariable {{idJavaType}} id) {
        log.debug("REST request to get {{entity.className}} : {}", id);
        Optional<{{entity.className}}> {{entity.instanceName}} = {{serviceInstance}}.get{{entity.className}}(id);
        return wrapOrNotFound({{entity.instanceName}});
    }

    /**
     * {@code DELETE  /{{entity.kebabCasePlural}}/:id} } : delete the "id" {{entity.instanceName}}.
     *
     * @param id the id of the {{entity.instanceName}} to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{{entity.kebabCasePlural}}/{id}")
    public ResponseEntity<Void> delete{{entity.className}}(@PathVariable {{idJavaType}} id) {
        log.debug("REST request to delete {{entity.className}} : {}", id);
        {{serviceInstance}}.delete{{entity.className}}(id);
        return ResponseEntity.noContent().build();
    }
    
    static <X> ResponseEntity<X> wrapOrNotFound(Optional<X> maybeResponse) {
        return maybeResponse
            .map(response -> ResponseEntity.ok().body(response))
            .orElseThrow(() -> new org.springframework.web.server.ResponseStatusException(org.springframework.http.HttpStatus.NOT_FOUND));
    }
}
