package {{basePackage}}.core.implementation.mappers;

import {{basePackage}}.core.domain.*;
import {{basePackage}}.core.inbound.dtos.*;

import org.mapstruct.AfterMapping;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

import java.util.List;

@Mapper
public interface {{entity.className}}Mapper {

    {{entity.className}}Mapper INSTANCE = Mappers.getMapper({{entity.className}}Mapper.class);

  {{~#each (findAggregateInputs entity) as |input|}}
    {{entity.className}} asEntityFrom{{input}}List({{input}} input);

    List<{{entity.className}}> asEntityFrom{{input}}List(List<{{input}}> inputList);

    {{#unless (skipEntityId entity)~}}@Mapping(target = "id", ignore = true){{/unless~}}
    {{entity.className}} update(@MappingTarget {{entity.className}} entity, {{input}} input);
  {{~/each}}

    {{~assign 'relationships' (findOwnedOneToManyRelationships entity)}}
    {{~#if relationships}}
    @AfterMapping
    default void manageRelationships(@MappingTarget {{entity.className}} entity) {
        {{~#each relationships as |relationship|}}
        if(entity.get{{capitalize relationship.fieldName}}() != null) {
          entity.get{{capitalize relationship.fieldName}}().forEach({{relationship.fieldName}} -> {{relationship.fieldName}}.set{{capitalize relationship.otherEntityFieldName}}(entity));
        }
        {{~/each}}
    }
    {{~/if}}
}
