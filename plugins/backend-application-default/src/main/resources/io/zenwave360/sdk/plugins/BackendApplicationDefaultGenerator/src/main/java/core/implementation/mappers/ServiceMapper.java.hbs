package {{layout.coreImplementationMappersPackage}};

import {{layout.coreImplementationMappersCommonPackage}}.BaseMapper;
import {{layout.entitiesPackage}}.*;
import {{layout.inboundDtosPackage}}.*;

import org.mapstruct.AfterMapping;
import java.util.List;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;
import org.springframework.data.domain.Page;

@Mapper(uses = { BaseMapper.class })
public interface {{service.name}}Mapper {

    {{service.name}}Mapper INSTANCE = Mappers.getMapper({{service.name}}Mapper.class);

// input mappings
{{~#each (serviceParameterEntityPairs service) as |entry|}}
    // {{@key}} {{method.name}}
    {{~#if (not (eq entity.className input))}}
        {{entity.className}} as{{entity.className}}({{mapperInputSignature input.className}});
    {{~/if}}
    {{#unless (skipEntityId entity)~}}@Mapping(target = "id", ignore = true){{/unless~}}
    {{entity.className}} update(@MappingTarget {{entity.className}} entity, {{mapperInputSignature input.className}});
{{~/each}}
// output mappings
{{~#each (serviceEntityReturnTypePairs service) as |entry|}}
    // {{@key}} {{method.name}}
    {{output.className}} as{{output.className}}({{entity.className}} entity);
    {{~#if entry.isArray}}
        List<{{output.className}}> as{{output.className}}List(List<{{entity.className}}> entity);
    {{~/if}}
    {{~#if entry.isPaginated}}
        default Page<{{output.className}}> as{{output.className}}Page(Page<{{entity.className}}> page) {
        return page.map(this::as{{output.className}});
        }
    {{~/if}}
{{~/each}}

{{~#each service.aggregates as |entityName|}}
    {{~assign "entity" (findEntity entityName)}}
    {{~assign 'relationships' (findOwnedOneToManyRelationships entity)}}
    {{~#if relationships}}
    @AfterMapping
    default void manageRelationships(@MappingTarget {{entity.className}} entity) {
        {{~#each relationships as |relationship|}}
        if(entity.get{{capitalize relationship.fieldName}}() != null) {
          entity.get{{capitalize relationship.fieldName}}().forEach({{relationship.fieldName}} -> {{relationship.fieldName}}.set{{capitalize relationship.otherEntityFieldName}}(entity));
        }
        {{~/each}}
    }
    {{~/if}}
{{~/each}}
}
