package {{coreImplementationPackage}}.mappers;

import {{basePackage}}.core.domain.*;
import {{basePackage}}.core.inbound.dtos.*;

import org.mapstruct.AfterMapping;
import java.util.List;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;
import org.springframework.data.domain.Page;

@Mapper(uses = { BaseMapper.class })
public interface {{service.name}}Mapper {

    {{service.name}}Mapper INSTANCE = Mappers.getMapper({{service.name}}Mapper.class);
{{~#each service.aggregates as |entityName|}}
    {{~assign "entity" (findEntity entityName)}}

  {{~#each (findAggregateInputs entity) as |input|}}
    {{~#if (not (eq entity.className input))}}
    // {{entity.className}} as{{entity.className}}({{mapperInputSignature input}});
    {{~/if}}

    {{#unless (skipEntityId entity)~}}@Mapping(target = "id", ignore = true){{/unless~}}
    {{entity.className}} update(@MappingTarget {{entity.className}} entity, {{mapperInputSignature input}});
  {{~/each}}

  {{~#each (findAggregateOutputs entity) as |output|}}
    {{output}} as{{output}}({{entity.className}} entity);
    List<{{output}}> as{{output}}List(List<{{entity.className}}> entity);
    default Page<{{output}}> as{{output}}Page(Page<{{entity.className}}> page) {
      return page.map(this::as{{output}});
    }
  {{~/each}}

    {{~assign 'relationships' (findOwnedOneToManyRelationships entity)}}
    {{~#if relationships}}
    @AfterMapping
    default void manageRelationships(@MappingTarget {{entity.className}} entity) {
        {{~#each relationships as |relationship|}}
        if(entity.get{{capitalize relationship.fieldName}}() != null) {
          entity.get{{capitalize relationship.fieldName}}().forEach({{relationship.fieldName}} -> {{relationship.fieldName}}.set{{capitalize relationship.otherEntityFieldName}}(entity));
        }
        {{~/each}}
    }
    {{~/if}}

{{~/each}}
}
