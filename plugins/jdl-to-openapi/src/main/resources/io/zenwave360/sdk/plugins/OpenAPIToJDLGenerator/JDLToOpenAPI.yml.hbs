openapi: 3.0.1
info:
  title: Zenwave 360 Generated API
  version: 0.0.1
  description: "Zenwave 360 Generated API"
  contact:
    email: email@domain.com
servers:
  - url: http://localhost:8080/api
tags:
  - name: "Default"
{{~#each jdlModel.serviceNames as |serviceName|}}
  - name: "{{asTagName serviceName}}"
{{~/each}}


paths:
{{~#each jdlModel.services as |service|}}
  {{~#if service.isLegacy}}
    {{~> (partial 'legacy')~}}
  {{~else}}
  {{~#each service.paths as |path|}}
  {{{@key}}}:
    {{~#each path as |operation|}}
    {{{@key}}}:
      operationId: {{operation.operationId}}
      description: "{{defaultIfEmpty operation.summary operation.operationId}}"
      tags: [{{#joinWithTemplate operation.tags delimiter=", " as |tag|}}{{asTagName tag}}{{/joinWithTemplate}}]
      {{~#if operation.hasParams}}
      parameters:
        {{~#each operation.pathParams as |pathParam|}}
        - name: "{{pathParam}}"
          in: path
          required: true
          schema:
            type: string
        {{~/each}}
        {{~#each path.params as |param|}}
        - name: "{{param}}"
          in: query
          schema:
            type: string
        {{~/each}}
        {{~#if operation.paginated}}
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sort"
        {{~/if}}
      {{~/if}}
      {{~#if operation.requestBody}}
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/{{operation.requestBody}}"
      {{~/if}}
      {{~#if operation.responseBody}}
      responses:
        "{{httpResponseStatus operation}}":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{{operation.responseBody}}{{responseBodyCollectionSuffix operation}}"
      {{~/if}}
    {{~/each}}
  {{~/each}}
  {{~/if}}
{{~/each}}

{{{schemasAsString}}}
{{~#if paginatedEntities}}
    Page:
      type: object
      required:
        - "content"
        - "totalElements"
        - "totalPages"
        - "size"
        - "number"
      properties:
        number:
          type: integer
          minimum: 0
        numberOfElements:
          type: integer
          minimum: 0
        size:
          type: integer
          minimum: 0
          maximum: 200
          multipleOf: 25
        totalElements:
          type: integer
        totalPages:
          type: integer

  parameters:
    page:
      name: page
      in: query
      description: The number of results page
      schema:
        type: integer
        format: int32
        default: 0
    limit:
      name: limit
      in: query
      description: The number of results in a single page
      schema:
        type: integer
        format: int32
        default: 20
    sort:
      name: sort
      in: query
      description: The number of results page
      schema:
        type: array
        items:
          type: string
{{~/if}}

  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    bearerAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
  - basicAuth: []  # <-- use the same name here
  - bearerAuth: []  # <-- use the same name here
