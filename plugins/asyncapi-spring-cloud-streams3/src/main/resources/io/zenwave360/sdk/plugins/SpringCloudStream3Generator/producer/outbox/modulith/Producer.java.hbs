package {{producerApiPackage}};

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Component;

{{#if modelPackage}}
import {{modelPackage}}.*;
{{/if}}

/**
 * {{asyncapi.description}}
 */
@Component("{{bindingPrefix}}{{producerClassName serviceName operationRoleType}}")
@jakarta.annotation.Generated(value = "io.zenwave360.sdk.plugins.SpringCloudStreams3Plugin", date = "{{date}}")
public class {{producerClassName serviceName operationRoleType}} implements {{producerInterfaceName serviceName operationRoleType}} {

    protected Logger log = LoggerFactory.getLogger(getClass());

    protected final ApplicationEventPublisher applicationEventPublisher;
    protected final ApplicationContext applicationContext;
{{~#each operations as |operation|}}
    public String {{operation.operationId}}BindingName = "{{bindingPrefix}}{{operation.x--operationIdKebabCase}}-out{{bindingSuffix}}";
{{~/each}}

{{~#if useEnterpriseEnvelope}}
    public EnvelopeWrapper envelopeWrapper;
{{~/if}}

    public {{producerClassName serviceName operationRoleType}}(ApplicationEventPublisher applicationEventPublisher, ApplicationContext applicationContext) {
        this.applicationEventPublisher = applicationEventPublisher;
        this.applicationContext = applicationContext;
    }

{{~#if useEnterpriseEnvelope}}
    @Autowired(required = false)
    public void setEnvelopeWrapper(EnvelopeWrapper envelopeWrapper) {
        this.envelopeWrapper = envelopeWrapper;
    }
{{~/if}}

{{~#each operations as |operation|}}
    {{#each operation.x--messages as |message|}}
    /**
     * {{{operation.summary}}}
     */
    public boolean {{operation.operationId}}{{methodSuffix message operation producer=true}}({{message.x--javaType}} payload, {{message.x--javaTypeSimpleName}}Headers headers) {
        log.debug("Sending message (via applicationEventPublisher) to scs binding: {}", {{operation.operationId}}BindingName);
        {{~#if (hasRuntimeHeaders message)}}
        headers = headers != null ? headers : new {{message.x--javaTypeSimpleName}}Headers();
        processRuntimeHeaders(payload, headers, {{message.x--javaTypeSimpleName}}Headers._runtimeheaders);
        {{~/if}}
        headers.put("spring.cloud.stream.sendto.destination", {{operation.operationId}}BindingName);
        Message message = MessageBuilder.createMessage({{#if (hasEnterpriseEnvelope operation)}}wrap(wrapNullPayload(payload)){{else}}wrapNullPayload(payload){{/if}}, new MessageHeaders(headers));
        applicationEventPublisher.publishEvent(message);
        return true;
    }

    {{/each}}
{{/each}}

{{~#if useEnterpriseEnvelope}}
    protected Object wrap(Object payload) {
        if(envelopeWrapper != null) {
            return envelopeWrapper.wrap(payload);
        }
        return payload;
    }

    public interface EnvelopeWrapper {
        public Object wrap(Object payload);
    }
{{~/if}}

{{> (partial '../../partials/wrapNullPayload')}}
{{> (partial '../../partials/runtime-headers')}}

}
