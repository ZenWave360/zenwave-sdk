package {{consumerApiPackage}};

import java.util.Map;
{{~#if exposeMessage}}
import org.springframework.messaging.Message;
{{~/if}}
{{#if modelPackage}}
import {{modelPackage}}.*;
{{/if}}

/**
* {{asyncapi.description}}
*/
@jakarta.annotation.Generated(value = "io.zenwave360.sdk.plugins.SpringCloudStreams3Plugin", date = "{{date}}")
public interface {{serviceInterfaceName operation.x--operationIdCamelCase}} {

{{#each operation.x--messages as |message|}}
    /**
     * {{{operation.summary}}}
     */
    {{~#if exposeMessage}}
    void {{operation.operationId}}{{methodSuffix message operation}}(Message<{{message.x--javaType}}> msg);
    {{~else}}
    void {{operation.operationId}}{{methodSuffix message operation}}({{message.x--javaType}} payload, {{message.x--javaTypeSimpleName}}Headers headers);
    {{~/if}}
{{/each~}}

{{#each messages as |message|}}
    {{~> (partial '../../common/Headers') isProducer=false}}
{{/each}}
}
