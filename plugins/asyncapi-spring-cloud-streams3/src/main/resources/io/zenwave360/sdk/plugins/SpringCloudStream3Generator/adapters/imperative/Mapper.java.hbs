package {{adaptersPackage}};

{{~#if modelPackage}}
import {{modelPackage}}.*;
{{~/if}}
{{~#if inboundDtosPackage}}
import {{inboundDtosPackage}}.*;
{{~/if}}
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.util.TimeZone;

@Mapper
public interface AdapterEventsMapper {

    AdapterEventsMapper INSTANCE = Mappers.getMapper(AdapterEventsMapper.class);

{{~#each dtoEntityMap as |dtoEntity|}}
    {{~#assign "dtoClassName"}}{{asJavaTypeName dtoEntity.schemaName}}{{/assign}}
    {{~#assign "entityClassName"}}{{entity.className}}{{entityDTOSuffix}}{{/assign}}
    {{~#assign "entityInputClassName"}}{{entity.className}}{{inputDTOSuffix}}{{/assign}}

    {{~#unless entity.options.isCriteria}}
        {{~#if inputDTOSuffix}}
    {{asJavaTypeName entityInputClassName}} as{{asJavaTypeName entityInputClassName}}({{dtoClassName}} dto);
        {{~else}}
    {{asJavaTypeName entityClassName}} as{{asJavaTypeName entityClassName}}({{dtoClassName}} dto);
        {{/if}}
    {{~/unless}}
{{~/each}}

  default Instant asInstant(OffsetDateTime date) {
    return date != null ? date.toInstant() : null;
  }

  default OffsetDateTime asOffsetDateTime(Instant date) {
    return date != null ? OffsetDateTime.ofInstant(date, TimeZone.getTimeZone("UTC").toZoneId()) : null;
  }
}
