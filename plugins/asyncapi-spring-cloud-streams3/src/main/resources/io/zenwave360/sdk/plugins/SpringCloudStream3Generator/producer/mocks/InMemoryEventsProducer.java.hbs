package {{producerApiPackage}};

import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;

{{#if modelPackage}}
import {{modelPackage}}.*;
{{/if}}

/**
 * {{asyncapi.description}}
 */
@jakarta.annotation.Generated(value = "io.zenwave360.sdk.plugins.SpringCloudStreams3Plugin", date = "{{date}}")
{{~#if generatedAnnotationClass}}@{{generatedAnnotationClass}}{{~/if}}
public class {{producerInMemoryName serviceName operationRoleType}} implements {{producerInterfaceName serviceName operationRoleType}} {

    protected Logger log = LoggerFactory.getLogger(getClass());

    protected ApplicationContext applicationContext;
    public {{producerInMemoryName serviceName operationRoleType}} withApplicationContext(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
        return this;
    }

{{~#each operations as |operation|}}
    public String {{operation.operationId}}BindingName = "{{bindingPrefix}}{{operation.x--operationIdKebabCase}}-out{{bindingSuffix}}";
{{~/each}}

{{~#if useEnterpriseEnvelope}}
    public EnvelopeWrapper envelopeWrapper;
    public void setEnvelopeWrapper(EnvelopeWrapper envelopeWrapper) {
        this.envelopeWrapper = envelopeWrapper;
    }
{{~/if}}

    protected Map<String, List<Message>> capturedMessages = new HashMap<>();
    public Map<String, List<Message>> getCapturedMessages() {
        return capturedMessages;
    }
    public List<Message> getCapturedMessages(String bindingName) {
        return capturedMessages.getOrDefault(bindingName, new ArrayList<>());
    }
    private boolean appendCapturedMessage(String bindingName, Message message) {
        if(capturedMessages.containsKey(bindingName)) {
            capturedMessages.get(bindingName).add(message);
        } else {
            capturedMessages.put(bindingName, new ArrayList<>(List.of(message)));
        }
        return true;
    }

{{~#each operations as |operation|}}
    {{#each operation.x--messages as |message|}}
    /**
     * {{{operation.summary}}}
     */
    public boolean {{operation.operationId}}{{methodSuffix message operation producer=true}}({{message.x--javaType}} payload, {{message.x--javaTypeSimpleName}}Headers headers) {
        log.debug("Capturing message to topic: {}", {{operation.operationId}}BindingName);
        {{~#if (hasRuntimeHeaders message)}}
        headers = headers != null ? headers : new {{message.x--javaTypeSimpleName}}Headers();
        processRuntimeHeaders(payload, headers, {{message.x--javaTypeSimpleName}}Headers._runtimeheaders);
        {{~/if}}
        Message message = MessageBuilder.createMessage({{#if (hasEnterpriseEnvelope operation)}}wrap(wrapNullPayload(payload)){{else}}wrapNullPayload(payload){{/if}}, new MessageHeaders(headers));
        return appendCapturedMessage({{operation.operationId}}BindingName, message);
    }

    {{/each}}
{{/each}}

{{~#if useEnterpriseEnvelope}}
    protected Object wrap(Object payload) {
        if(envelopeWrapper != null) {
            return envelopeWrapper.wrap(payload);
        }
        return payload;
    }

    public interface EnvelopeWrapper {
        public Object wrap(Object payload);
    }
{{/if~}}

{{> (partial '../partials/wrapNullPayload') }}
{{> (partial '../partials/runtime-headers') }}
}
