package {{apiPackage}};

import java.util.HashMap;
import java.util.Map;

import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.model.changestream.ChangeStreamDocument;
import org.bson.BsonDocument;
import org.bson.BsonString;
import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.messaging.MessageListener;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Component;
import org.springframework.util.MimeType;

{{#if modelPackage}}
import {{modelPackage}}.*;
{{/if}}

/**
 * {{asyncapi.description}}
 */
@Component
public class {{apiClassName}} implements I{{apiClassName}} {

    private Logger log = LoggerFactory.getLogger(getClass());

    @Autowired
    private StreamBridge streamBridge;
    @Autowired
    private MongoTemplate mongoTemplate;

{{~#each operations as |operation|}}
    public String {{operation.operationId}}BindingName = "{{operation.x--operationIdKebabCase}}-out{{bindingSuffix}}";
    public String {{operation.operationId}}OutboxCollection = {{operation.operationId}}BindingName;
{{/each}}
    public String resumeTokensCollectionName = "ChangeStreamResumeTokens";
    public int skipMessagesBeforePersistingResumeToken = 100;


    private Map<String, Integer> messageCounters = new HashMap();
{{#each operations as |operation| }}
    public BsonDocument get{{asJavaTypeName operation.operationId}}ResumeToken() {
        var tokens = mongoTemplate.getCollection(resumeTokensCollectionName).find(new Document("collectionName", {{operation.operationId}}OutboxCollection)).first();
        return tokens != null ? new BsonDocument("_data", new BsonString((String) tokens.get("resumeToken"))) : null;
    }

    public final MessageListener<ChangeStreamDocument<Document>, Map> {{operation.operationId}}MongoChangeStreamsListener = (outboxMessage) -> {
        try {
            log.info("Received outbox collection change for '{}'", {{operation.operationId}}OutboxCollection);
            log.trace("Received outbox collection change message: {}", outboxMessage.getBody());
            sendOutboxMessage(outboxMessage, {{operation.operationId}}OutboxCollection, {{operation.operationId}}BindingName);
        } catch (Exception e) {
            log.error("Error sending message to stream", e);
        }
    };
{{/each}}

    private void sendOutboxMessage(org.springframework.data.mongodb.core.messaging.Message<ChangeStreamDocument<Document>, Map> outboxMessage, String collectionName, String eventBindingName) {
        // send message to the stream
        MimeType outputContentType = MimeType.valueOf("application/json");
        Message message = MessageBuilder.createMessage(outboxMessage.getBody().get("payload"), new MessageHeaders((Map<String, Object>) outboxMessage.getBody().get("headers")));
        streamBridge.send(eventBindingName, message, outputContentType);

        // persist resume token
        int messageCount = messageCounters.getOrDefault(collectionName, 0) + 1;
        messageCounters.put(collectionName, messageCount);
        if(messageCount > skipMessagesBeforePersistingResumeToken) {
            messageCounters.put(collectionName, 0);
            var resumeToken = outboxMessage.getRaw().getResumeToken().getString("_data").getValue();
            var timestamp = outboxMessage.getBody().get("timestamp");
            var clusterTime = outboxMessage.getRaw().getClusterTime();
            mongoTemplate.upsert(new Query(Criteria.where("collectionName").is(collectionName)),
                    new Update().set("resumeToken", resumeToken).set("timestamp", timestamp).set("clusterTime", clusterTime), resumeTokensCollectionName);
        }
    }

    private boolean saveMessageToOutbox(Message message, String collectionName) {
        Map outboxMessage = new java.util.HashMap();
        outboxMessage.put("timestamp", System.nanoTime());
        outboxMessage.put("payload", message.getPayload());
        outboxMessage.put("headers", message.getHeaders());
        mongoTemplate.insert(outboxMessage, collectionName);
        return true;
    }

{{~#each operations as |operation|}}
    {{#each operation.x--messages as |message|}}
    /**
     * {{operation.description}}
     */
    public boolean {{operation.operationId}}({{message.x--javaType}} payload, Header... headers) {
        MimeType outputContentType = MimeType.valueOf("{{defaultIfEmpty operation.operation.message.contentType 'application/json'}}");
        Message message = MessageBuilder.createMessage(payload, asMessageHeaders(headers));
        // return streamBridge.send({{operation.operationId}}BindingName, message, outputContentType);
        return saveMessageToOutbox(message, {{operation.operationId}}OutboxCollection);
    }

    {{/each}}
{{/each}}

    protected MessageHeaders asMessageHeaders(Header... headers) {
        Map<String, Object> map = Header.asMap(headers);
        return new MessageHeaders(map);
    }
}
