package {{apiPackage}};

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Component;
import org.springframework.util.MimeType;

{{#if modelPackage}}
import {{modelPackage}}.*;
{{/if}}

/**
 * {{asyncapi.description}}
 */
@Component
public class {{apiClassName}} implements I{{apiClassName}} {

    @Autowired
    private StreamBridge streamBridge;

    private String bindingName = "{{operation.x--operationIdKebabCase}}-out-0";

    public void setBindingName(String bindingName) {
        this.bindingName = bindingName;
    }

{{#each operations as |operation|}}
    {{#each operation.x--messages as |message|}}
    /**
     * {{operation.description}}
     */
    public boolean {{operation.operationId}}({{message.x--javaType}} payload, Header... headers) {
        MimeType outputContentType = MimeType.valueOf("{{operation.operation.message.contentType}}");
        Message message = MessageBuilder.createMessage(payload, asMessageHeaders(headers));
        return streamBridge.send(bindingName, message, outputContentType);
    }

    {{/each}}
{{/each}}

    protected MessageHeaders asMessageHeaders(Header... headers) {
        Map<String, Object> map = Header.asMap(headers);
        return new MessageHeaders(map);
    }
}
