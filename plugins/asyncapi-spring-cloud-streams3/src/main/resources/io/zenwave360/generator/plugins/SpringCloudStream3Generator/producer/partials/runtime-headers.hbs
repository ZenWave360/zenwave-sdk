{{~#if (hasRuntimeHeaders operations)}}
    protected void processRuntimeHeaders(Object payload, Map<String, Object> headers, Map<String, String> runtimeHeaders) {
        if(runtimeHeaders == null ||runtimeHeaders.isEmpty()) {
            return;
        }
        if(headers == null) {
            headers = new java.util.HashMap<>();
        }
        for (Map.Entry<String, String> runtimeHeader :runtimeHeaders.entrySet()) {
            String location = runtimeHeader.getValue().replace("$message.payload#/", "");
            if("$tracingIdSupplier".equals(location.trim())) {
                if(tracingIdSupplier != null) {
                    headers.put(runtimeHeader.getKey(), tracingIdSupplier.get());
                }
                continue;
            }
            try {
                var parts = java.util.Arrays.asList(location.split("/"));
                var value = payload;
                for (String part : parts) {
                    if(value != null) {
                        var pd = new java.beans.PropertyDescriptor(part, value.getClass());
                        if(pd != null && pd.getReadMethod() != null) {
                            value = pd.getReadMethod().invoke(value);
                        } else {
                            log.error("Unable to find property for: {} in class: {}", parts, payload.getClass());
                        }
                    }
                }
                headers.put(runtimeHeader.getKey(), value);
            } catch (java.beans.IntrospectionException | java.lang.reflect.InvocationTargetException | IllegalAccessException e) {
                throw new RuntimeException(e);
            }
        }
    }
{{~/if}}
