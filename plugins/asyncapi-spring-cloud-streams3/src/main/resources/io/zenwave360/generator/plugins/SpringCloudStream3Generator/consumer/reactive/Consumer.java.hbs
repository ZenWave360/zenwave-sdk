package {{apiPackage}};

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.function.Function;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.Message;
{{#if exposeMessage}}
    import org.springframework.messaging.support.MessageBuilder;
{{/if}}
import org.springframework.messaging.MessageHeaders;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

{{#if modelPackage}}
import {{modelPackage}}.*;
{{/if}}

@Component("{{operation.x--operationIdKebabCase}}")
public class {{consumerName operation.x--operationIdCamelCase}} implements Function<Flux<Message<{{messageType operation}}>>, Mono<Void>> {

    protected Logger log = LoggerFactory.getLogger(getClass());

    protected {{serviceName operation.x--operationIdCamelCase}} service;

    public {{consumerName operation.x--operationIdCamelCase}}({{serviceName operation.x--operationIdCamelCase}} service) {
        this.service = service;
    }


    @Override
    public Mono<Void> apply(Flux<Message<{{messageType operation}}>> messageFlux) {
        log.debug("Received message: {}", messageFlux);
        return messageFlux.flatMap(m -> {
        {{#each operation.x--messages as |message|}}
            if(m.getPayload() instanceof {{message.x--javaType}}) {
            {{~#if exposeMessage}}
                service.{{operation.operationId}}{{methodSuffix message operation}}(Flux.just(MessageBuilder.<{{message.x--javaType}}>createMessage(({{message.x--javaType}}) m.getPayload(), m.getHeaders())));
            {{~else}}
                service.{{operation.operationId}}{{methodSuffix message operation}}(Flux.just(({{message.x--javaType}}) m.getPayload()));
            {{~/if}}
            }
        {{/each}}
            return Mono.empty();
        }).then();
    }
}
