package {{controllersPackage}}.mappers;

import {{entitiesPackage}}.*;
import {{inboundDtosPackage}}.*;

import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;
import java.util.List;
import org.springframework.data.domain.Page;

@Mapper(uses = BaseMapper.class)
public interface {{service.name}}DTOsMapper {

    {{service.name}}DTOsMapper INSTANCE = Mappers.getMapper({{service.name}}DTOsMapper.class);

    // request mappings
{{~#each requestDtosWithEntities as |entities|}}
    {{~assign "dto" @key }}
    {{~#each entities as |entity|}}
    {{entity}} as{{entity}}({{dto}}{{openApiModelNameSuffix}} dto);
    {{~/each}}
{{~/each}}

    // response mappings
{{~#each responseDtosWithEntities as |entities|}}
    {{~assign "dto" @key }}
    {{~#each entities as |entity|}}
    {{dto}}{{openApiModelNameSuffix}} as{{dto}}{{openApiModelNameSuffix}}({{{entity}}} entity);
    {{~/each}}
{{~/each}}

    // response paginated mappings
{{~#each responsePaginatedDtosWithEntities as |entities|}}
    {{~assign "dto" @key }}
    {{~#each entities as |entity|}}
    List<{{dto}}{{openApiModelNameSuffix}}> as{{dto}}{{openApiModelNameSuffix}}List(List<{{entity}}> entityList);
    default Page<{{dto}}{{openApiModelNameSuffix}}> as{{dto}}{{openApiModelNameSuffix}}Page(Page<{{entity}}> page) {
      return page.map(this::as{{dto}}{{openApiModelNameSuffix}});
    }
    {{~/each}}
{{~/each}}

}
