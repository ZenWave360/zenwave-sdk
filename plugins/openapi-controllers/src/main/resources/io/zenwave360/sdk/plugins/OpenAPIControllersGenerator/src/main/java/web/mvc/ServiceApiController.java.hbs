package {{controllersPackage}};

import {{entitiesPackage}}.*;
import {{servicesPackage}}.*;
import {{inboundDtosPackage}}.*;
import {{openApiApiPackage}}.*;
import {{openApiModelPackage}}.*;
import {{controllersPackage}}.mappers.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.math.*;
import java.time.*;
import java.util.*;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.mapstruct.factory.Mappers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.web.context.request.NativeWebRequest;


/**
 * REST controller for {{serviceName}}Api.
 */
@RestController
@RequestMapping("/api")
public class {{serviceName}}ApiController implements {{serviceName}}Api {

    private final Logger log = LoggerFactory.getLogger(getClass());

    @Autowired
    private NativeWebRequest request;

{{#each entitiesServices as |coreServiceName|}}
    private {{coreServiceName}} {{asInstanceName coreServiceName}};
    @Autowired
    public {{serviceName}}ApiController set{{coreServiceName}}({{coreServiceName}} {{asInstanceName coreServiceName}}) {
        this.{{asInstanceName coreServiceName}} = {{asInstanceName coreServiceName}};
        return this;
    }
{{/each}}

    private {{serviceName}}DTOsMapper mapper = {{serviceName}}DTOsMapper.INSTANCE;

    public {{serviceName}}ApiController({{#joinWithTemplate entitiesServices delimiter=", "}}{{this}} {{asInstanceName this}}{{/joinWithTemplate}}) {
        {{#joinWithTemplate entitiesServices}}
        this.{{asInstanceName this}} = {{asInstanceName this}};
        {{/joinWithTemplate}}
    }

    @Override
    public Optional<NativeWebRequest> getRequest() {
        return Optional.ofNullable(request);
    }

{{#each serviceOperations}}
    {{~#assign "TODO"}}{{#unless serviceMethod}}null; // TODO: service{{/unless}}{{/assign}}

    @Override
    public ResponseEntity<{{{responseEntityExpression}}}> {{operationId}}({{{methodParameters}}}) {
        log.debug("REST request to {{operationId}}: {{methodParameterPlaceholders}}", {{methodParameterInstances}});
    {{~#if requestBodySchema~}}
        var {{mappedInputVariable}} = mapper.as{{serviceMethodParameter}}({{reqBodyVariableName}});
    {{/if~}}
    {{~#if isResponsePaginated ~}}
        var {{{asInstanceName methodReturnType}}}Page = {{TODO}} {{asInstanceName serviceMethod.serviceName}}.{{serviceMethodCall}};
        var responseDTO = mapper.as{{responseEntityName}}({{{asInstanceName methodReturnType}}}Page);
        return ResponseEntity.status({{statusCode}}).body(responseDTO);
    {{~else isResponseArray ~}}
        var {{methodReturnTypeInstance}} = {{TODO}} {{asInstanceName serviceMethod.serviceName}}.{{serviceMethodCall}};
        var responseDTO = mapper.as{{responseDtoName}}List({{methodReturnTypeInstance}});
        return ResponseEntity.status({{statusCode}}).body(responseDTO);
    {{~else if responseSchemaName ~}}
        var {{methodReturnTypeInstance}} = {{TODO}} {{asInstanceName serviceMethod.serviceName}}.{{serviceMethodCall}};
        {{~#if returnTypeIsOptional }}
        if ({{methodReturnTypeInstance}}.isPresent()) {
            {{responseDtoName}} responseDTO = mapper.as{{responseDtoName}}({{methodReturnTypeInstance}}.get());
            return ResponseEntity.status({{statusCode}}).body(responseDTO);
        } else {
            return ResponseEntity.notFound().build();
        }
        {{~else}}
        {{responseDtoName}} responseDTO = mapper.as{{responseDtoName}}({{methodReturnTypeInstance}});
        return ResponseEntity.status({{statusCode}}).body(responseDTO);
        {{~/if}}
    {{~else if (and serviceMethod.serviceName serviceMethodCall)}}
        {{asInstanceName serviceMethod.serviceName}}.{{serviceMethodCall}};
        return ResponseEntity.status({{statusCode}}).build();
    {{~else}}
        // TODO: {{asInstanceName serviceMethod.serviceName}}.{{serviceMethodCall}};
        return ResponseEntity.status({{statusCode}}).build();
    {{~/if}}
    }
{{~/each}}

  protected Pageable pageOf(Optional<Integer> page, Optional<Integer> limit, Optional<List<String>> sort) {
    return PageRequest.of(page.orElse(0), limit.orElse(10));
  }
}
