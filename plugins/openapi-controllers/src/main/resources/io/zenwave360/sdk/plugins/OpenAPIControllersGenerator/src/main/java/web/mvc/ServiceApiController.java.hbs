package {{controllersPackage}};

import {{entitiesPackage}}.*;
import {{servicesPackage}}.*;
import {{inboundDtosPackage}}.*;
import {{openApiApiPackage}}.*;
import {{openApiModelPackage}}.*;
import {{controllersPackage}}.mappers.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.mapstruct.factory.Mappers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.web.context.request.NativeWebRequest;


/**
 * REST controller for {{serviceName}}.
 */
@RestController
@RequestMapping("/api")
public class {{service.name}}ApiController implements {{service.name}}Api {

    private final Logger log = LoggerFactory.getLogger(getClass());

    @Autowired
    private NativeWebRequest request;

{{~#if jdl.isDummy}}/*{{/if}}
{{#each entitiesServices as |coreServiceName|}}
    private {{coreServiceName}} {{asInstanceName coreServiceName}};
    @Autowired
    public {{service.name}}ApiController set{{coreServiceName}}({{coreServiceName}} {{asInstanceName coreServiceName}}) {
        this.{{asInstanceName coreServiceName}} = {{asInstanceName coreServiceName}};
        return this;
    }
{{/each}}
{{#if jdl.isDummy}}*/{{/if~}}

    private {{service.name}}DTOsMapper mapper = {{service.name}}DTOsMapper.INSTANCE;

    @Override
    public Optional<NativeWebRequest> getRequest() {
        return Optional.ofNullable(request);
    }

{{#each service.operations as |operation|}}
    {{~#assign "requestDTOClassName"}}{{asDtoName operation.x--request-dto }}{{/assign}}
    {{~#assign "responseDTOClassName"}}{{asDtoName operation.x--response.x--response-dto }}{{/assign}}

    {{~#if operation.x--request-dto}}
        {{~assign "requestBodySchema" operation.x--request-schema }}
        {{~assign "requestEntity"     operation.x--request-entity}}
        {{~#if requestEntity}}
            {{~#assign "requestEntityClassName"}}{{requestEntity.className}}{{inputDTOSuffix}}{{/assign}}
            {{~#assign "requestEntityInstance"}}{{requestEntity.instanceName}}{{inputDTOSuffix}}{{/assign}}
            {{~#assign "requestEntityCriteriaClassName"}}{{requestEntity.options.searchCriteria}}{{/assign}}
            {{~#if requestEntity.options.isCriteria}}
                {{~#assign "requestEntityClassName"}}{{requestEntity.className}}{{/assign}}
                {{~#assign "requestEntityInstance"}}{{requestEntity.instanceName}}{{/assign}}
            {{~/if}}
        {{/if}}
    {{/if}}
    {{~#if operation.x--response.x--response-dto}}
        {{~assign "responseBodySchema"      operation.x--response.x--response-schema }}
        {{~assign "responseEntity"          operation.x--response.x--response-entity }}
        {{~assign "responseEntityPaginated" operation.x--response.x--response-entity-paginated }}

        {{~#if responseEntity}}
            {{~#assign "responseEntityClassName"}}{{responseEntity.className}}{{entityDTOSuffix}}{{/assign}}
            {{~#assign "responseEntityInstance"}}{{responseEntity.instanceName}}{{entityDTOSuffix}}{{/assign}}
            {{~#assign "entityServiceName"}}{{asInstanceName (defaultIfEmpty (entityService responseEntity.name) "service")}}{{/assign}}
        {{/if}}
        {{~#if responseEntityPaginated}}
            {{~#assign "responseEntityClassName"}}Page<{{responseEntityPaginated.className}}>{{/assign}}
            {{~#assign "responseEntityInstance"}}{{responseEntityPaginated.instanceNamePlural}}{{entityDTOSuffix}}{{/assign}}
            {{~#assign "entityServiceName"}}{{asInstanceName (defaultIfEmpty (entityService responseEntityPaginated.name) "service")}}{{/assign}}
        {{/if}}
    {{/if}}
    @Override
    public ResponseEntity<{{orVoid responseDTOClassName}}> {{operation.operationId}}({{{asMethodParameters operation}}}) {
    {{!--
    /* requestBodySchema: {{{requestBodySchema}}} */
    /* requestEntity: {{{requestEntity}}} */
    /* responseBodySchema: {{{responseBodySchema}}} */
    /* responseEntity: {{{responseEntity}}} */  --}}
    {{~#if requestBodySchema~}}
        {{requestEntityClassName}} input = mapper.as{{requestEntityClassName}}(reqBody);
    {{/if~}}
    {{~#if responseEntity~}}
        {{~#if (eq operation.x--response.x--statusCode "201") ~}}
            {{{responseEntityClassName}}} {{responseEntityInstance}} = null; // TODO: {{entityServiceName}}.{{operation.operationId}}(input);
            {{responseDTOClassName}} responseDTO = mapper.as{{responseDTOClassName}}({{responseEntityInstance}});
            return ResponseEntity.status({{statusCode operation.x--response.x--statusCode}}).body(responseDTO);
        {{~else~}}
            Optional<{{{responseEntityClassName}}}> {{responseEntityInstance}} = null; // TODO: {{entityServiceName}}.{{operation.operationId}}(input);
            if ({{responseEntityInstance}}.isPresent()) {
                {{responseDTOClassName}} responseDTO = mapper.as{{responseDTOClassName}}({{responseEntityInstance}}.get());
                return ResponseEntity.status({{statusCode operation.x--response.x--statusCode}}).body(responseDTO);
            } else {
                return ResponseEntity.notFound().build();
            }
        {{~/if~}}
    {{else if responseEntityPaginated~}}
        {{{responseEntityClassName}}} {{responseEntityInstance}} = null; // TODO: {{entityServiceName}}.{{operation.operationId}}({{requestEntityInstance}}, pageOf(page, limit, sort));
        {{responseDTOClassName}} responseDTO = mapper.as{{responseDTOClassName}}({{responseEntityInstance}});
        return ResponseEntity.status({{statusCode operation.x--response.x--statusCode}}).body(responseDTO);
    {{else}}
        return ResponseEntity.status({{statusCode operation.x--response.x--statusCode}}).build();
    {{/if~}}
    }
{{/each}}

  protected Pageable pageOf(Optional<Integer> page, Optional<Integer> limit, Optional<List<String>> sort) {
    return PageRequest.of(page.orElse(0), limit.orElse(10));
  }
}
