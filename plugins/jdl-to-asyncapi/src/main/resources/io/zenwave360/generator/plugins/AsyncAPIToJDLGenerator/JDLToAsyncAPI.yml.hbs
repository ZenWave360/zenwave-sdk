asyncapi: 2.4.0
info:
  title: Zenwave 360 Generated API
  version: 0.0.1

defaultContentType: application/json

tags:
  - name: "Default"
{{~#each jdlModel.serviceNames as |serviceName|}}
  - name: "{{asTagName serviceName}}"
{{~/each}}

channels:
{{~#each jdlModel.entities as |entity|}}
  {{~#unless (skipOperations entity)}}
  {{~#if includeCommands}}
  {{entity.kebabCase}}.requests:
    subscribe:
      summary: {{entity.className}} Async Requests
      operationId: do{{entity.className}}Request
      tags:
        - name: {{asTagName entity.options.service}}
      message:
        $ref: "#/components/messages/{{entity.className}}RequestMessage"
   {{~/if}}
  {{~#if includeEvents}}
  {{entity.kebabCase}}.events:
    publish:
      summary: {{entity.className}} Domain Events
      operationId: on{{entity.className}}Event
      tags:
        - name: {{asTagName entity.options.service}}
      message:
        $ref: "#/components/messages/{{entity.className}}EventMessage"
   {{~/if}}
  {{/unless}}
{{~/each}}

components:
  messages:
{{~#each jdlModel.entities as |entity|}}
  {{~#unless (skipOperations entity)}}
    {{~#if includeCommands}}
    {{entity.className}}RequestMessage:
      messageId: {{entity.className}}RequestMessage
      name: {{entity.className}}RequestMessage
      title: Async Command/Request for a {{entity.className}}
      summary: Async Command/Request for a {{entity.className}}
      schemaFormat: {{{schemaFormatString}}}
      payload:
        $ref: "{{payloadRef entity "Request" }}"
    {{~/if}}
    {{~#if includeEvents}}
    {{entity.className}}EventMessage:
      name: {{entity.className}}EventMessage
      messageId: {{entity.className}}EventMessage
      title: Message for a {{entity.className}} Event
      summary: Message for a {{entity.className}} Event
      schemaFormat: {{{schemaFormatString}}}
      payload:
        $ref: "{{payloadRef entity "Event"}}"
    {{~/if}}
  {{/unless}}
{{~/each}}

{{{schemasAsString}}}

{{~#if schemasAsString}}
{{~#each jdlModel.entities as |entity|}}
  {{~#unless (skipOperations entity)}}
    {{~#if includeCommands}}
    {{entity.className}}RequestPayload:
      type: object
      properties:
        {{entity.instanceName}}Id:
          type: string
        requestType:
          type: string
          enum:
          - "create"
          - "update"
          - "delete"
        {{entity.instanceName}}:
          $ref: "#/components/schemas/{{entity.className}}"
    {{~/if}}
    {{~#if includeEvents}}
    {{entity.className}}EventPayload:
      type: object
      properties:
        {{entity.instanceName}}Id:
          type: string
        eventType:
          type: string
          enum:
          - "created"
          - "updated"
          - "deleted"
        {{entity.instanceName}}:
          $ref: "#/components/schemas/{{entity.className}}"
    {{~/if}}
  {{/unless}}
{{~/each}}
{{~/if}}
