package {{controllersPackage}}.mappers;

import {{entitiesPackage}}.*;
import {{inboundDtosPackage}}.*;

import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;
import java.util.List;
import org.springframework.data.domain.Page;

@Mapper(componentModel = "spring", uses = BaseMapper.class)
public interface {{service.name}}DTOsMapper {

{{#each dtoWithEntityMap as |dto|}}
    {{~#assign "dtoName"}}{{openApiModelNamePrefix}}{{dto.name}}{{openApiModelNameSuffix}}{{/assign}}
    {{~#assign "dtoClassName"}}{{openApiModelPackage}}.{{dtoName}}{{/assign}}
    {{~assign "entity" dto.entity}}
    {{~assign "paginatedEntity" dto.paginatedEntity}}
{{~#if entity}}
    {{~#assign "entityClassName"}}{{entity.className}}{{entityDTOSuffix}}{{/assign}}
    {{~#assign "entityInstance"}}{{entity.instanceName}}{{entityDTOSuffix}}{{/assign}}
    {{~#assign "entityInputClassName"}}{{entity.className}}{{inputDTOSuffix}}{{/assign}}
    {{~#assign "entityCriteriaClassName"}}{{entity.className}}{{criteriaDTOSuffix}}{{/assign}}

    {{dtoClassName}} as{{dtoName}}({{entity.className}} {{entity.instanceName}});
    {{entityClassName}} as{{entityClassName}}({{dtoClassName}} dto);
    {{~#if inputDTOSuffix}}
        {{entityInputClassName}} as{{entityInputClassName}}({{dtoClassName}} dto);
    {{/if}}
    {{~#if entity.options.searchCriteria}}
        {{entityCriteriaClassName}} as{{entityCriteriaClassName}}({{dtoClassName}} dto);
    {{/if}}
    {{entityClassName}} update(@MappingTarget {{entityClassName}} {{entity.instanceName}}, {{dtoClassName}} dto);
    List<{{dtoClassName}}> as{{dtoName}}List(List<{{entity.className}}> {{entity.instanceNamePlural}});
    List<{{entityClassName}}> as{{entityClassName}}List(List<{{dtoClassName}}> dtos);
{{~/if}}
{{~#if paginatedEntity}}
    {{~#assign "paginatedEntityClassName"}}{{paginatedEntity.className}}{{/assign}}
    {{dtoClassName}} as{{dtoName}}(Page<{{paginatedEntityClassName}}> page);
{{/if~}}
{{/each}}

}