openapi: 3.0.1
info:
  title: Zenwave 360 Generated API
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/
tags:
  - name: "Default"
  - name: "Customer"
  - name: "CustomerOrder"

paths:
  /payment-details:
    get:
      summary: Find PaymentDetails
      operationId: findPaymentDetails
      tags: [CustomerOrder]
      responses:
        "200":
          description: PaymentDetails
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentDetailsPaginated"
    post:
      summary: Create PaymentDetails
      operationId: createPaymentDetails
      tags: [CustomerOrder]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentDetails"
      responses:
        "201":
          description: PaymentDetails
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentDetails"

  /payment-details/{id}:
    parameters:
    - name: id
      in: path
      description: PaymentDetails id
      required: true
      schema:
        type: string
    get:
      summary: Get PaymentDetails by id
      operationId: getPaymentDetails
      tags: [CustomerOrder]
      responses:
        "200":
          description: PaymentDetails
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentDetails"
    put:
      summary: Update PaymentDetails
      operationId: updatePaymentDetails
      tags: [CustomerOrder]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentDetails"
      responses:
        "200":
          description: PaymentDetails
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentDetails"
  

  /customers:
    get:
      summary: Find Customers
      operationId: findCustomers
      tags: [Customer]
      responses:
        "200":
          description: Customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPaginated"
    post:
      summary: Create Customer
      operationId: createCustomer
      tags: [Customer]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "201":
          description: Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"

  /customers/{id}:
    parameters:
    - name: id
      in: path
      description: Customer id
      required: true
      schema:
        type: string
    get:
      summary: Get Customer by id
      operationId: getCustomer
      tags: [Customer]
      responses:
        "200":
          description: Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
    put:
      summary: Update Customer
      operationId: updateCustomer
      tags: [Customer]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "200":
          description: Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
  


  /customer-orders:
    get:
      summary: Find CustomerOrders
      operationId: findCustomerOrders
      tags: [CustomerOrder]
      responses:
        "200":
          description: CustomerOrders
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerOrderPaginated"
    post:
      summary: Create CustomerOrder
      operationId: createCustomerOrder
      tags: [CustomerOrder]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerOrder"
      responses:
        "201":
          description: CustomerOrder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerOrder"

  /customer-orders/{id}:
    parameters:
    - name: id
      in: path
      description: CustomerOrder id
      required: true
      schema:
        type: string
    get:
      summary: Get CustomerOrder by id
      operationId: getCustomerOrder
      tags: [CustomerOrder]
      responses:
        "200":
          description: CustomerOrder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerOrder"
    put:
      summary: Update CustomerOrder
      operationId: updateCustomerOrder
      tags: [CustomerOrder]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerOrder"
      responses:
        "200":
          description: CustomerOrder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerOrder"
  

  /shipping-details:
    get:
      summary: Find ShippingDetails
      operationId: findShippingDetails
      tags: [CustomerOrder]
      responses:
        "200":
          description: ShippingDetails
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingDetailsPaginated"
    post:
      summary: Create ShippingDetails
      operationId: createShippingDetails
      tags: [CustomerOrder]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShippingDetails"
      responses:
        "201":
          description: ShippingDetails
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingDetails"

  /shipping-details/{id}:
    parameters:
    - name: id
      in: path
      description: ShippingDetails id
      required: true
      schema:
        type: string
    get:
      summary: Get ShippingDetails by id
      operationId: getShippingDetails
      tags: [CustomerOrder]
      responses:
        "200":
          description: ShippingDetails
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingDetails"
    put:
      summary: Update ShippingDetails
      operationId: updateShippingDetails
      tags: [CustomerOrder]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShippingDetails"
      responses:
        "200":
          description: ShippingDetails
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingDetails"
  
components:
  schemas:
    PaymentDetails:
      type: "object"
      x-business-entity: "PaymentDetails"
      properties:
        id:
          type: "string"
        creditCardNumber:
          type: "string"
    PaymentDetailsPaginated:
      allOf:
      - $ref: "#/components/schemas/Page"
      - x-business-entity-paginated: "PaymentDetails"
      - properties:
          content:
            type: "array"
            items:
              $ref: "#/components/schemas/PaymentDetails"
    Customer:
      type: "object"
      x-business-entity: "Customer"
      required:
      - "firstName"
      - "lastName"
      - "password"
      - "email"
      - "username"
      properties:
        id:
          type: "string"
        firstName:
          type: "string"
          minLength: "3"
          maxLength: "250"
        lastName:
          type: "string"
          minLength: "3"
          maxLength: "250"
        password:
          type: "string"
          minLength: "3"
          maxLength: "250"
        email:
          type: "string"
          minLength: "3"
          maxLength: "250"
        username:
          type: "string"
          minLength: "3"
          maxLength: "250"
    CustomerPaginated:
      allOf:
      - $ref: "#/components/schemas/Page"
      - x-business-entity-paginated: "Customer"
      - properties:
          content:
            type: "array"
            items:
              $ref: "#/components/schemas/Customer"
    OrderedItem:
      type: "object"
      x-business-entity: "OrderedItem"
      required:
      - "name"
      - "price"
      properties:
        catalogItemId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
          minLength: "3"
          maxLength: "250"
        quantity:
          type: "integer"
          format: "int32"
        price:
          type: "number"
          format: "double"
    OrderedItemPaginated:
      allOf:
      - $ref: "#/components/schemas/Page"
      - x-business-entity-paginated: "OrderedItem"
      - properties:
          content:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderedItem"
    CustomerOrder:
      type: "object"
      x-business-entity: "CustomerOrder"
      properties:
        id:
          type: "string"
        date:
          type: "string"
          format: "date-time"
        shippingDetails:
          $ref: "#/components/schemas/ShippingDetails"
        orderedItems:
          $ref: "#/components/schemas/OrderedItem"
        paymentDetails:
          $ref: "#/components/schemas/PaymentDetails"
        status:
          $ref: "#/components/schemas/OrderStatus"
        customer:
          $ref: "#/components/schemas/Customer"
    CustomerOrderPaginated:
      allOf:
      - $ref: "#/components/schemas/Page"
      - x-business-entity-paginated: "CustomerOrder"
      - properties:
          content:
            type: "array"
            items:
              $ref: "#/components/schemas/CustomerOrder"
    ShippingDetails:
      type: "object"
      x-business-entity: "ShippingDetails"
      properties:
        id:
          type: "string"
        address:
          type: "string"
    ShippingDetailsPaginated:
      allOf:
      - $ref: "#/components/schemas/Page"
      - x-business-entity-paginated: "ShippingDetails"
      - properties:
          content:
            type: "array"
            items:
              $ref: "#/components/schemas/ShippingDetails"
    OrderStatus:
      type: "string"
      enum:
      - "DELIVERED"
      - "CONFIRMED"
      - "SHIPPED"

    Page:
      type: object
      required:
        - "content"
        - "totalElements"
        - "totalPages"
        - "size"
        - "number"
      properties:
        number:
          type: integer
          minimum: 0
        numberOfElements:
          type: integer
          minimum: 0
        size:
          type: integer
          minimum: 0
          maximum: 200
          multipleOf: 25
        totalElements:
          type: integer
        totalPages:
          type: integer