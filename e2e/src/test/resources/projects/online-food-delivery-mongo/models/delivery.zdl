/**
 * ZenWave Online Food Delivery - Delivery Module.
 */
config {
    title "ZenWave Online Food Delivery - Delivery Module"
    basePackage "io.zenwave360.example.delivery"
    targetFolder "modules/delivery"
    persistence mongodb

    // these are code generation plugins for ZenWave IntelliJ Plugin, for models you can skip to 'entities' section
    plugins {

        ZDLToOpenAPIPlugin {
            idType string
            targetFile "{{targetFolder}}/src/main/resources/apis/openapi.yml"
        }

        ZDLToAsyncAPIPlugin {
            asyncapiVersion v3
            idType string
            targetFile "{{targetFolder}}/src/main/resources/apis/asyncapi.yml"
        }

        BackendApplicationDefaultPlugin {
            useLombok true
            includeEmitEventsImplementation true
            // --force // overwite all files
        }

        OpenAPIControllersPlugin {
            formatter google // comments in one line are better for demos
            // TODO fix this: specFile "{{targetFolder}}/src/main/resources/apis/openapi.yml"
            specFile "modules/delivery/src/main/resources/apis/openapi.yml"
            zdlFile "models/delivery.zdl"

            // these should match the values of openapi-generator-maven-plugin
            openApiApiPackage "{{basePackage}}.adapters.web"
            openApiModelPackage "{{basePackage}}.adapters.web.model"
            openApiModelNameSuffix DTO
        }

        SpringCloudStreams3AdaptersPlugin {
            apiId "orders"
            role client
            specFile "modules/orders/src/main/resources/apis/asyncapi.yml"
            modelPackage "{{basePackage}}.client.{{apiId}}.events.dtos"
            consumerApiPackage "{{basePackage}}.client.{{apiId}}.events.consumer"
        }
    }
}

apis {
    asyncapi(provider) default {
        uri "delivery/src/main/resources/apis/asyncapi.yml"
    }
    asyncapi(client) RestaurantsAsyncAPI {
        uri "restaurants/src/main/resources/apis/asyncapi.yml"
    }
    asyncapi(client) OrdersAsyncAPI {
        uri "orders/src/main/resources/apis/asyncapi.yml"
    }
}

// == Entities =============================

@aggregate
entity Delivery {
    orderId String required
    customer Customer {
        customerId String required
        name String required
        phone String required
        address Address {
            street String
            zip String
        }
    }
    restaurant Restaurant {
        restaurantId String
        name String
        phone String
        address Address {
            street String
            zip String
        }
    }
    orderItems OrderItem[] {
       menuItemId String required
       name String required
       description String
       price BigDecimal required
       quantity Integer required
    }
    status DeliveryOrderStatus required
}

enum DeliveryOrderStatus {
    ACCEPTED, REJECTED, IN_PROGRESS, READY, DELIVERED, CANCELLED
}

// == Serices =============================
input DeliveryInput {
    orderId String required
    date LocalDateTime required
    restaurantId String required
    customerId String required
    items OrderItem[] required
}

input OrderStatusUpdated {
    orderId String
    dateTime Instant
    status String
    previousStatus String
}

input DeliveryStatusInput {
    status DeliveryOrderStatus required
    operatorName String required
}

@rest("/delivery")
service DeliveryService for (Delivery) {

    @asyncapi({api: OrdersAsyncAPI, channel: "OrderCreatedChannel"})
    createDelivery(DeliveryInput) Delivery withEvents DeliveryStatusUpdated

    @asyncapi({api: OrdersAsyncAPI, channel: "OrderUpdatesChannel"})
    onOrderStatusUpdated(id, OrderStatusUpdated) Delivery withEvents DeliveryStatusUpdated

    @put("/{orderId}/status")
    updateDeliveryStatus(id, DeliveryStatusInput) Delivery withEvents DeliveryStatusUpdated

    @get @paginated
    listDeliveries() Delivery[]
}

@asyncapi({channel: "DeliveryStatusChannel", topic: "delivery.delivery_status"})
event DeliveryStatusUpdated {
    customerOrderId String required
    deliveryId String required
    status DeliveryOrderStatus required
    message String
}
