
/**
 * ZenWave Online Food Delivery - Customers Module.
 */
config {
    title "ZenWave Online Food Delivery - Customers Module"
    basePackage "io.zenwave360.example.customers"
    targetFolder "modules/customers"
    persistence mongodb

    // these are code generation plugins for ZenWave IntelliJ Plugin, for models you can skip to 'entities' section
    plugins {

        ZDLToOpenAPIPlugin {
            idType string
            targetFile "{{targetFolder}}/src/main/resources/apis/openapi.yml"
        }

        ZDLToAsyncAPIPlugin {
            asyncapiVersion v3
            idType string
            targetFile "{{targetFolder}}/src/main/resources/apis/asyncapi.yml"
        }

        BackendApplicationDefaultPlugin {
            useLombok true
            // --force // overwite all files
        }

        OpenAPIControllersPlugin {
            formatter google // comments in one line are better for demos
            // TODO fix this: specFile "{{targetFolder}}/src/main/resources/apis/openapi.yml"
            specFile "modules/customers/src/main/resources/apis/openapi.yml"
            zdlFile "models/customers.zdl"

            // these should match the values of openapi-generator-maven-plugin
            openApiApiPackage "{{basePackage}}.adapters.web"
            openApiModelPackage "{{basePackage}}.adapters.web.model"
            openApiModelNameSuffix DTO
        }
    }
}


// == Entities =============================
/**
* Customer javadoc comment
*/
@aggregate
entity Customer {
  firstName String required minlength(2) maxlength(250) /** first name javadoc comment */
  lastName String required minlength(2) maxlength(250) /** last name javadoc comment */
  email String required unique /** email javadoc comment */
  phone String required
  /**
   * address is a nested entity
   */
  addresses Address[] {
    identifier String required /** Description identifier for this Address */

    street String required
    city String
    state String
    zip String
    type AddressType required /** address type is an enum */
  }
}

enum AddressType {  HOME(1) /** home description */,  WORK(1) /** work description */ }

// == Services =============================

@inline
input AddressInput {
    identifier String required /** Description identifier for this Address */
    address Address
}

/**
 Service javadoc comment
 */
@rest("/customers")
service CustomerService for (Customer) {
  /**
   * Create customer javadoc comment
   */
  @post
  createCustomer(Customer) Customer withEvents CustomerEvent

  @put("/{customerId}")
  updateCustomer(id, Customer) Customer? withEvents CustomerEvent

  /** Updates a the customer address identified by address.identifier */
  @put("/{customerId}/address/{identifier}")
  updateCustomerAddress(id, AddressInput) Customer? withEvents CustomerEvent CustomerAddressUpdated

  @delete("/{customerId}")
  deleteCustomer(id) withEvents CustomerEvent

  @get("/{customerId}")
  getCustomer(id) Customer?

  @get({params: {search: "string"}})
  @paginated
  listCustomers() Customer[]
}

// == Events =============================

@skip // skip generating this domain enum, it will genereate by asyncapi code generator.
enum EventType {  CREATED(1) /** created description */,  UPDATED(1) /** updated description */,  DELETED(1) /** deleted description */ }

@asyncapi({channel: "CustomerEventsChannel", topic: "customer.events"})
event CustomerEvent {
  customerId String
  eventType EventType
  customer Customer
}

@asyncapi({channel: "CustomerAddressEventsChannel", topic: "customer.address-events"})
event CustomerAddressUpdated {
  customerId String
  addressDescription String
  originalAddress Address
  newAddress Address
}
