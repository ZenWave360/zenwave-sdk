openapi: 3.0.1
info:
  title: "Clinical Tool - WebApp API"
  version: 0.0.1
  description: "Clinical Tool - WebApp API"
  contact:
    email: email@domain.com
servers:
  - description: localhost
    url: http://localhost:8080/api
  - description: custom
    url: "{protocol}://{server}/{path}"
    variables:
      protocol:
        enum: ['http', 'https']
        default: 'http'
      server:
        default: 'localhost:8080'
      path:
        default: 'api'
tags:
  - name: "Default"
  - name: "Hospital"
  - name: "Patients"


paths:
  /hospitals/{id}:
    get:
      operationId: getHospital
      description: "getHospital"
      tags: [Hospital]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Hospital"
    put:
      operationId: updateHospital
      description: "updateHospital"
      tags: [Hospital]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Hospital"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Hospital"
  /hospitals:
    post:
      operationId: createHospital
      description: "createHospital"
      tags: [Hospital]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Hospital"
      responses:
        "201":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Hospital"
    get:
      operationId: listHospitals
      description: "listHospitals"
      tags: [Hospital]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HospitalList"
  /doctors:
    post:
      operationId: createDoctor
      description: "createDoctor"
      tags: [Hospital]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Doctor"
      responses:
        "201":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
    get:
      operationId: listDoctors
      description: "listDoctors"
      tags: [Hospital]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorList"
  /doctors/{id}:
    put:
      operationId: updateDoctor
      description: "updateDoctor"
      tags: [Hospital]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Doctor"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
    get:
      operationId: getDoctor
      description: "getDoctor"
      tags: [Hospital]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
  /hospital/{hospitalId}/doctors:
    get:
      operationId: listHospitalDoctors
      description: "listHospitalDoctors"
      tags: [Hospital]
      parameters:
        - name: "hospitalId"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorList"
  /hospital/{hospitalId}/patients:
    get:
      operationId: listHospitalPatients
      description: "listHospitalPatients"
      tags: [Hospital]
      parameters:
        - name: "hospitalId"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientHospitalList"
  /patients/{hisNumber}/{phoneNumber}:
    get:
      operationId: loadPatient
      description: "Loads a saved temporal patient or new one if not found."
      tags: [Patients]
      parameters:
        - name: "hisNumber"
          in: path
          required: true
          schema:
            type: string
        - name: "phoneNumber"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
    patch:
      operationId: partialPatientUpdate
      description: "Persist a temporal patient in the database."
      tags: [Patients]
      parameters:
        - name: "hisNumber"
          in: path
          required: true
          schema:
            type: string
        - name: "phoneNumber"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientPatch"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
  /patients:
    post:
      operationId: createPatient
      description: "Persite a patient in the database and deletes any temporal data."
      tags: [Patients]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patient"
      responses:
        "201":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
  /patients/{id}:
    put:
      operationId: updatePatient
      description: "Updates a patient in the database."
      tags: [Patients]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patient"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
    get:
      operationId: getPatient
      description: "Load a patient by id"
      tags: [Patients]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
  /patients/{id}/opt-out:
    post:
      operationId: requestOptOut
      description: "requestOptOut"
      tags: [Patients]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"

components:
  schemas:
    Hospital:
      type: "object"
      x-business-entity: "Hospital"
      required:
      - "name"
      - "lang"
      - "timezone"
      properties:
        id:
          type: "integer"
          format: "int64"
        version:
          type: "integer"
        name:
          type: "string"
          maxLength: 254
        lang:
          type: "string"
          maxLength: 3
          description: "Primary language of the hospital"
        timezone:
          type: "string"
          maxLength: 3
          description: "ECT (Europe/Madrid)"
    HospitalList:
      type: "array"
      items:
        $ref: "#/components/schemas/Hospital"
    Doctor:
      type: "object"
      x-business-entity: "Doctor"
      required:
      - "hospitalId"
      - "name"
      - "surname"
      properties:
        id:
          type: "integer"
          format: "int64"
        version:
          type: "integer"
        userId:
          type: "integer"
          format: "int64"
        profilePictureId:
          type: "integer"
          format: "int64"
        hospitalId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
          maxLength: 100
        surname:
          type: "string"
          maxLength: 100
        surname2:
          type: "string"
          maxLength: 100
        email:
          type: "string"
          maxLength: 100
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}"
        phoneNumber:
          type: "string"
          maxLength: 20
        lang:
          type: "string"
          maxLength: 3
          description: "Primary language of the doctor"
    DoctorList:
      type: "array"
      items:
        $ref: "#/components/schemas/Doctor"
    Patient:
      type: "object"
      x-business-entity: "Patient"
      required:
      - "hospitalId"
      - "phoneNumber"
      - "hisNumber"
      - "email"
      properties:
        id:
          type: "integer"
          format: "int64"
        version:
          type: "integer"
        userId:
          type: "integer"
          format: "int64"
        spikeUUID:
          type: "string"
          description: "se modifica directamente via Spike webhook en WearableDataRepository"
        hospitalId:
          type: "integer"
          format: "int64"
        profilePictureId:
          type: "integer"
          format: "int64"
        phoneNumber:
          type: "string"
          maxLength: 20
        hisNumber:
          type: "string"
          maxLength: 100
        email:
          type: "string"
          maxLength: 100
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}"
        generalInfo:
          $ref: "#/components/schemas/GeneralInfo"
        healthInsuranceInfo:
          $ref: "#/components/schemas/HealthInsuranceInfo"
        documentIds:
          type: "array"
          items:
            type: "integer"
            format: "int64"
        medicalContacts:
          type: "array"
          items:
            $ref: "#/components/schemas/MedicalContact"
        personalContacts:
          type: "array"
          items:
            $ref: "#/components/schemas/PersonalContact"
        patientAddresses:
          type: "array"
          items:
            $ref: "#/components/schemas/PatientAddress"
        hospitalAddresses:
          type: "array"
          items:
            $ref: "#/components/schemas/HospitalAddress"
        patientWearables:
          type: "array"
          items:
            $ref: "#/components/schemas/PatientWearable"
    PatientHospital:
      type: "object"
      x-business-entity: "PatientHospital"
      properties:
        patientId:
          type: "integer"
          format: "int64"
        hospitalId:
          type: "integer"
          format: "int64"
        hisNumber:
          type: "string"
        fullName:
          type: "string"
        gender:
          $ref: "#/components/schemas/GenderType"
        dni:
          type: "string"
        birthDate:
          type: "string"
          format: "date"
        phone:
          type: "string"
        email:
          type: "string"
        insuranceCardNumber:
          type: "string"
        address:
          type: "string"
    PatientHospitalList:
      type: "array"
      items:
        $ref: "#/components/schemas/PatientHospital"
    PatientRelationshipType:
      type: "string"
      x-business-entity: "PatientRelationshipType"
      enum:
      - "SON_DAUGTHER"
      - "CARE_GIVER"
      - "OTHER"
    PatientWearable:
      type: "object"
      x-business-entity: "PatientWearable"
      required:
      - "wearableType"
      properties:
        id:
          type: "integer"
          format: "int64"
        version:
          type: "integer"
        wearableType:
          type: "string"
        serialNumber:
          type: "string"
          maxLength: 20
    HealthInsuranceInfo:
      type: "object"
      x-business-entity: "HealthInsuranceInfo"
      required:
      - "insuranceCompanyId"
      - "insuranceCardNumber"
      properties:
        insuranceCompanyId:
          type: "string"
          maxLength: 100
        insuranceCardNumber:
          type: "string"
          maxLength: 20
    PersonalContact:
      type: "object"
      x-business-entity: "PersonalContact"
      required:
      - "name"
      - "surname"
      - "phoneNumber"
      - "email"
      - "emergencyContact"
      properties:
        id:
          type: "integer"
          format: "int64"
        version:
          type: "integer"
        name:
          type: "string"
          maxLength: 100
        surname:
          type: "string"
          maxLength: 100
        surname2:
          type: "string"
          maxLength: 100
        phoneNumber:
          type: "string"
          maxLength: 20
        email:
          type: "string"
          maxLength: 100
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}"
        patientRelationshipType:
          $ref: "#/components/schemas/PatientRelationshipType"
        emergencyContact:
          type: "boolean"
    GenderType:
      type: "string"
      x-business-entity: "GenderType"
      enum:
      - "MALE"
      - "FEMALE"
      - "OTHER"
    GeneralInfo:
      type: "object"
      x-business-entity: "GeneralInfo"
      required:
      - "name"
      - "surname"
      - "identityDocumentType"
      - "identityDocumentNumber"
      - "birthDate"
      - "gender"
      properties:
        name:
          type: "string"
          maxLength: 100
        surname:
          type: "string"
          maxLength: 100
        surname2:
          type: "string"
          maxLength: 100
        identityDocumentType:
          $ref: "#/components/schemas/IdentityDocumentType"
        identityDocumentNumber:
          type: "string"
          maxLength: 20
        birthDate:
          type: "string"
          format: "date"
        gender:
          $ref: "#/components/schemas/GenderType"
        lang:
          type: "string"
          maxLength: 3
          description: "Primary language of the patient"
    IdentityDocumentType:
      type: "string"
      x-business-entity: "IdentityDocumentType"
      enum:
      - "DNI"
      - "NIE"
      - "PASSPORT"
    MedicalContact:
      type: "object"
      x-business-entity: "MedicalContact"
      required:
      - "name"
      - "surname"
      - "phoneNumber"
      - "email"
      properties:
        id:
          type: "integer"
          format: "int64"
        version:
          type: "integer"
        name:
          type: "string"
          maxLength: 100
        surname:
          type: "string"
          maxLength: 100
        surname2:
          type: "string"
          maxLength: 100
        hospital:
          type: "string"
          maxLength: 254
        area:
          type: "string"
          maxLength: 100
        jobPosition:
          type: "string"
          maxLength: 100
        phoneNumber:
          type: "string"
          maxLength: 20
        email:
          type: "string"
          maxLength: 100
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}"
    PatientAddress:
      type: "object"
      x-business-entity: "PatientAddress"
      required:
      - "street"
      - "city"
      - "postalCode"
      - "countryCode"
      - "current"
      properties:
        id:
          type: "integer"
          format: "int64"
        version:
          type: "integer"
        street:
          type: "string"
          maxLength: 100
        city:
          type: "string"
          maxLength: 100
        postalCode:
          type: "string"
          maxLength: 10
        countryCode:
          type: "string"
          maxLength: 3
        additionalInfo:
          type: "string"
          maxLength: 254
        current:
          type: "boolean"
    HospitalAddress:
      type: "object"
      x-business-entity: "HospitalAddress"
      required:
      - "street"
      - "city"
      - "postalCode"
      - "countryCode"
      properties:
        id:
          type: "integer"
          format: "int64"
        version:
          type: "integer"
        street:
          type: "string"
          maxLength: 100
        city:
          type: "string"
          maxLength: 100
        postalCode:
          type: "string"
          maxLength: 10
        countryCode:
          type: "string"
          maxLength: 3
        additionalInfo:
          type: "string"
          maxLength: 254
    PatientPatch:
      allOf:
      - $ref: "#/components/schemas/Patient"

    Page:
      type: object
      required:
        - "content"
        - "totalElements"
        - "totalPages"
        - "size"
        - "number"
      properties:
        number:
          type: integer
          minimum: 0
        numberOfElements:
          type: integer
          minimum: 0
        size:
          type: integer
          minimum: 0
          maximum: 200
          multipleOf: 25
        totalElements:
          type: integer
        totalPages:
          type: integer

  parameters:
    page:
      name: page
      in: query
      description: The number of results page
      schema:
        type: integer
        format: int32
        default: 0
    limit:
      name: limit
      in: query
      description: The number of results in a single page
      schema:
        type: integer
        format: int32
        default: 20
    sort:
      name: sort
      in: query
      description: The number of results page
      schema:
        type: array
        items:
          type: string

  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    bearerAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
  - basicAuth: []  # <-- use the same name here
  - bearerAuth: []  # <-- use the same name here
