openapi: 3.0.1
info:
  title: "Master Data API"
  version: 0.0.1
  description: "Master Data API"
  contact:
    email: email@domain.com
servers:
  - description: localhost
    url: http://localhost:8080/api
  - description: custom
    url: "{protocol}://{server}/{path}"
    variables:
      protocol:
        enum: ['http', 'https']
        default: 'http'
      server:
        default: 'localhost:8080'
      path:
        default: 'api'
tags:
  - name: "Default"
  - name: "MasterData"


paths:
  /masterdata:
    post:
      operationId: createMasterData
      description: "createMasterData"
      tags: [MasterData]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterData"
      responses:
        "201":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterData"
    get:
      operationId: listMasterData
      description: "listMasterData"
      tags: [MasterData]
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterDataPaginated"
  /masterdata/{id}:
    get:
      operationId: getMasterData
      description: "getMasterData"
      tags: [MasterData]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterData"
    put:
      operationId: updateMasterData
      description: "updateMasterData"
      tags: [MasterData]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterData"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterData"
    delete:
      operationId: deleteMasterData
      description: "deleteMasterData"
      tags: [MasterData]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "OK"
  /masterdata/type/{type}:
    get:
      operationId: listMasterDataOfType
      description: "listMasterDataOfType"
      tags: [MasterData]
      parameters:
        - name: "type"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterDataKeyValueList"

components:
  schemas:
    MasterData:
      type: "object"
      x-business-entity: "MasterData"
      required:
      - "type"
      - "key"
      - "value"
      properties:
        id:
          type: "integer"
          format: "int64"
        version:
          type: "integer"
        type:
          $ref: "#/components/schemas/MasterDataType"
        key:
          type: "string"
          maxLength: 254
        value:
          type: "string"
          maxLength: 254
        translations:
          type: "array"
          items:
            $ref: "#/components/schemas/MasterDataTranslation"
    MasterDataPaginated:
      allOf:
      - $ref: "#/components/schemas/Page"
      - properties:
          content:
            type: "array"
            items:
              $ref: "#/components/schemas/MasterData"
    MasterDataKeyValue:
      type: "object"
      x-business-entity: "MasterDataKeyValue"
      properties:
        key:
          type: "string"
        value:
          type: "string"
    MasterDataKeyValueList:
      type: "array"
      items:
        $ref: "#/components/schemas/MasterDataKeyValue"
    MasterDataTranslation:
      type: "object"
      x-business-entity: "MasterDataTranslation"
      required:
      - "lang"
      - "text"
      properties:
        lang:
          type: "string"
        text:
          type: "string"
    MasterDataType:
      type: "string"
      x-business-entity: "MasterDataType"
      enum:
      - "GENDER"
      - "ID_DOCUMENT_TYPE"
      - "COUNTRY"
      - "INSURANCE_COMPANY"
      - "MEDICAL_AREA"

    Page:
      type: object
      required:
        - "content"
        - "totalElements"
        - "totalPages"
        - "size"
        - "number"
      properties:
        number:
          type: integer
          minimum: 0
        numberOfElements:
          type: integer
          minimum: 0
        size:
          type: integer
          minimum: 0
          maximum: 200
          multipleOf: 25
        totalElements:
          type: integer
        totalPages:
          type: integer

  parameters:
    page:
      name: page
      in: query
      description: The number of results page
      schema:
        type: integer
        format: int32
        default: 0
    limit:
      name: limit
      in: query
      description: The number of results in a single page
      schema:
        type: integer
        format: int32
        default: 20
    sort:
      name: sort
      in: query
      description: The number of results page
      schema:
        type: array
        items:
          type: string

  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    bearerAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
  - basicAuth: []  # <-- use the same name here
  - bearerAuth: []  # <-- use the same name here
